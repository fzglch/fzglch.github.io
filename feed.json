{
    "version": "https://jsonfeed.org/version/1",
    "title": "Darlin' 夢が叶ったの",
    "description": "",
    "home_page_url": "https://fzglch.github.io",
    "items": [
        {
            "id": "https://fzglch.github.io/2021/04/05/%E9%AB%98%E6%95%88%E7%AD%9B%E8%B4%A8%E6%95%B0/",
            "url": "https://fzglch.github.io/2021/04/05/%E9%AB%98%E6%95%88%E7%AD%9B%E8%B4%A8%E6%95%B0/",
            "title": "高效筛质数",
            "date_published": "2021-04-05T10:26:54.000Z",
            "content_html": "<p>这篇文章主要是讲的复杂度 o（n）的筛质数，是个很简单的问题，忘了叫什么名字了，也无关紧要</p>\n<h2 id=\"质数\"><a class=\"markdownIt-Anchor\" href=\"#质数\">#</a> 质数</h2>\n<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>只能整除自身和1，最小的质数是2。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>比如若三个整数a，b，c，a*b<span class=\"token operator\">=</span>c，问a b有多少种组合，就可以通过把c拆分成各个质数的乘积来解决。</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"常规筛法\"><a class=\"markdownIt-Anchor\" href=\"#常规筛法\">#</a> 常规筛法</h2>\n<h3 id=\"常用的判断n是否为质数的方法思路\"><a class=\"markdownIt-Anchor\" href=\"#常用的判断n是否为质数的方法思路\">#</a> 常用的判断 n 是否为质数的方法思路</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h  </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>for<span class=\"token punctuation\">(</span>int i ； i*i <span class=\"token operator\">&lt;</span> n <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> if（n%i<span class=\"token operator\">==</span><span class=\"token number\">0</span>）<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.；<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>显然复杂度是log n</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC9iYWlrZS0lRTYlOTclQjYlRTklOTclQjQlRTUlQTQlOEQlRTYlOUQlODIlRTUlQkElQTY/d3Byb3Y9c3JwdzFfMA==\">时间复杂度–中文维基百科</span></p>\n<h3 id=\"用此筛法筛从1到n的复杂度\"><a class=\"markdownIt-Anchor\" href=\"#用此筛法筛从1到n的复杂度\">#</a> 用此筛法筛从 1 到 n 的复杂度</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对某个数都是log n ， n 次 ， 复杂度是 n*log n；</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"此筛法的使用思路\"><a class=\"markdownIt-Anchor\" href=\"#此筛法的使用思路\">#</a> 此筛法的使用思路</h2>\n<h3 id=\"任何质数的整k倍都不是质数k为整且大于1\"><a class=\"markdownIt-Anchor\" href=\"#任何质数的整k倍都不是质数k为整且大于1\">#</a> 任何质数的整 k 倍都不是质数（k 为整且大于 1）</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对任意质数a，k*a都不是质数可以筛掉</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"将a从2开始每次晒完范围内kaa变为下一个大于a的质数比如2后是33后是54被2那次筛掉不是质数\"><a class=\"markdownIt-Anchor\" href=\"#将a从2开始每次晒完范围内kaa变为下一个大于a的质数比如2后是33后是54被2那次筛掉不是质数\">#</a> 将 a 从 2 开始，每次晒完范围内 k*a，a 变为下一个大于 a 的质数，比如 2 后是 3，3 后是 5（4 被 2 那次筛掉不是质数）</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>比如a先是2后是3，3后是5（4被2那次筛掉不是质数），5后是7（6被3筛），7后是11（8、10被2筛，9被3筛）</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"时间复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度分析\">#</a> 时间复杂度分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对区间<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>，n<span class=\"token punctuation\">]</span>，每个元素要么是作为质数a被访问，要么被a*k筛去，时间复杂度是n</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/03/03/%E7%BF%BB%E5%94%B1%E6%AD%8C%E6%89%8BJonathan-Young%E7%AE%80%E4%BB%8B/",
            "url": "https://fzglch.github.io/2021/03/03/%E7%BF%BB%E5%94%B1%E6%AD%8C%E6%89%8BJonathan-Young%E7%AE%80%E4%BB%8B/",
            "title": "翻唱歌手Jonathan Young简介",
            "date_published": "2021-03-03T11:25:05.000Z",
            "content_html": "<p>外国的两个翻唱歌手，改编风格偏电吉他等比较摇滚一些的风格</p>\n<h2 id=\"大致说明\"><a class=\"markdownIt-Anchor\" href=\"#大致说明\">#</a> 大致说明</h2>\n<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>翻唱质量很高很好听，并且全部改为英文歌词  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如果你平常也看jojo，那么听推荐你点下面链接去听一听其中的这一个系列</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWpKNDExWTdRNT9wPTE=\">JOJO 系列翻唱</span></p>\n<h3 id=\"简介again\"><a class=\"markdownIt-Anchor\" href=\"#简介again\">#</a> 简介 again</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>翻唱的主要是漫曲  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>下面是找到的B站搬运的一个合集</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVc3NDExWTd1bz9mcm9tPXNlYXJjaCZhbXA7c2VpZD01MDcxMTMzNTI5NzUxNzgzMTU0\">漫曲翻唱合集</span></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/03/03/%E7%BA%BF%E6%AE%B5%E6%A0%91/",
            "url": "https://fzglch.github.io/2021/03/03/%E7%BA%BF%E6%AE%B5%E6%A0%91/",
            "title": "线段树",
            "date_published": "2021-03-03T10:54:02.000Z",
            "content_html": "<p>这篇文章主要是讲的线段数相关问题</p>\n<h2 id=\"哪类问题是线段树问题\"><a class=\"markdownIt-Anchor\" href=\"#哪类问题是线段树问题\">#</a> 哪类问题是线段树问题</h2>\n<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>当有一堆比较大的数据，且常需要用到update和query的时候</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"为什么要用线段树\"><a class=\"markdownIt-Anchor\" href=\"#为什么要用线段树\">#</a> 为什么要用线段树</h2>\n<h3 id=\"普通数组与累积和数组\"><a class=\"markdownIt-Anchor\" href=\"#普通数组与累积和数组\">#</a> 普通数组与累积和数组</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h  </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>用普通一维数组，时间复杂度上，前者是o（1），后者是o（n）  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>用累和数组，前者是o（n），后者是o（1）  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>而对于大的数据量来说，反复的复杂度为n的操作是不够快的</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC9iYWlrZS0lRTYlOTclQjYlRTklOTclQjQlRTUlQTQlOEQlRTYlOUQlODIlRTUlQkElQTY/d3Byb3Y9c3JwdzFfMA==\">时间复杂度–中文维基百科</span></p>\n<h3 id=\"此操作线段树的复杂度就是决定性的原因\"><a class=\"markdownIt-Anchor\" href=\"#此操作线段树的复杂度就是决定性的原因\">#</a> 此操作线段树的复杂度就是决定性的原因</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>线段树就是把两个操作都变成log n，而这就是这类问题要使用线段树的原因  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>其实也不一定只能是线段树才能解决这个问题，只要是把累和变成各个区间和，区间和之间再各自又有和就行  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>这样就可以做到快速得到和的同时又可以使修改一个数据的时候修改太多  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>但想来想去其实就和线段树差不多，只是线段树是两两一组而已。</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFNyVCQSVCRiVFNiVBRSVCNSVFNiVBMCU5MQ==\">线段树–中文维基百科</span></p>\n<h2 id=\"线段树的使用思路\"><a class=\"markdownIt-Anchor\" href=\"#线段树的使用思路\">#</a> 线段树的使用思路</h2>\n<h3 id=\"先贴上维基百科上的示例代码\"><a class=\"markdownIt-Anchor\" href=\"#先贴上维基百科上的示例代码\">#</a> 先贴上维基百科上的示例代码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>下面的链接里有一些大致的讲解和源码  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>看一下就好，代码不一定要写成那样，你自己的代码能好好的达到效果就OK</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC9iYWlrZS0lRTclQkElQkYlRTYlQUUlQjUlRTYlQTAlOTFfKCVFNSU4QyVCQSVFOSU5NyVCNCVFNiU5RiVBNSVFOCVBRiVBMik=\">线段树示例–中文维基百科</span></p>\n<h3 id=\"递归创建思路\"><a class=\"markdownIt-Anchor\" href=\"#递归创建思路\">#</a> 递归创建思路</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对于递归创建线段树，要创一个左到右的线段树，先创左到中，再创中到右  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>递归边界就是左右相等，此时创建最底层的一个节点。</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFOSU4MCU5MiVFNSVCRCU5Mg==\">递归–中文维基百科</span></p>\n<h3 id=\"迭代创建思路\"><a class=\"markdownIt-Anchor\" href=\"#迭代创建思路\">#</a> 迭代创建思路</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>迭代的话，最主要的是要计算这个树最左下角那个节点在对应一维数组的下标  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这样要考虑的东西会变多，而也正是因为之前递归创建没有考虑到这些  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>可能直接导致的问题就是开数组的时候只开了2n多一点点，导致wa </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>线段树具体需要多大取决于n能整除多少次2以及你具体创建树的方式  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>最坏的情况需要4n大小，比如n是65，且你创建的树特别“完整”的时候</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFOCVCRiVBRCVFNCVCQiVBMw==\">迭代–中文维基百科</span></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/03/03/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/",
            "url": "https://fzglch.github.io/2021/03/03/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/",
            "title": "最小生成树",
            "date_published": "2021-03-03T10:30:53.000Z",
            "content_html": "<p>这篇文章主要是讲的最小生成树相关问题</p>\n<h2 id=\"哪类问题是最小生成树问题\"><a class=\"markdownIt-Anchor\" href=\"#哪类问题是最小生成树问题\">#</a> 哪类问题是最小生成树问题</h2>\n<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对于n个点，有m条带权重的边将它们链接着（m ∈ 【n-1，n*（n-1）/2】） </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>要求选其中n-1个边，使得权重和最小</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"为什么要用最小生成树\"><a class=\"markdownIt-Anchor\" href=\"#为什么要用最小生成树\">#</a> 为什么要用最小生成树</h2>\n<h3 id=\"暴力枚举法\"><a class=\"markdownIt-Anchor\" href=\"#暴力枚举法\">#</a> 暴力枚举法</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h  </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对于m条边选n-1个，选法在n和m不小的情况下非常之大  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>比如n仅仅是501，m是10000时，10000个里选500个，选法太多，枚举不现实</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC9iYWlrZS0lRTYlOTclQjYlRTklOTclQjQlRTUlQTQlOEQlRTYlOUQlODIlRTUlQkElQTY/d3Byb3Y9c3JwdzFfMA==\">时间复杂度–中文维基百科</span></p>\n<h3 id=\"同样复杂度就是决定性的原因\"><a class=\"markdownIt-Anchor\" href=\"#同样复杂度就是决定性的原因\">#</a> 同样复杂度就是决定性的原因</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>最小生成树最好情况下一次就能解决，最坏情况m-n+2次</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFNiU5QyU4MCVFNSVCMCU4RiVFNyU5NCU5RiVFNiU4OCU5MCVFNiVBMCU5MQ==\">最小生成树–中文维基百科</span></p>\n<h2 id=\"最小生成树的使用思路\"><a class=\"markdownIt-Anchor\" href=\"#最小生成树的使用思路\">#</a> 最小生成树的使用思路</h2>\n<h3 id=\"本质上都是贪心算法\"><a class=\"markdownIt-Anchor\" href=\"#本质上都是贪心算法\">#</a> 本质上都是贪心算法</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>最小生成树的两种算法思想，一个是把边排序，依次选，一个是由点出发，选小权重的边，两个本质上其实都是贪心的思想，并且是保证正确的  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>两者的关键点都在于每次选边要检验是不是会导致成环，《算法导论》里就是指安全边</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFOCVCNCVBQSVFNSVCRiU4MyVFNyVBRSU5NyVFNiVCMyU5NQ==\">贪心算法–中文维基百科</span></p>\n<h3 id=\"使用思路\"><a class=\"markdownIt-Anchor\" href=\"#使用思路\">#</a> 使用思路</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>体现在代码上，最难的部分就是并查集，使用最小生成只需要写好并查集然后简单模拟一下K算法或者P算法就OK</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFNSVCOSVCNiVFNiU5RiVBNSVFOSU5QiU4Ng==\">并查集–中文维基百科</span></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/01/31/hello-world/",
            "url": "https://fzglch.github.io/2021/01/31/hello-world/",
            "title": "~哈喽喽~",
            "date_published": "2021-01-31T13:22:39.403Z",
            "content_html": "<p>你好，欢迎来到<a href=\"https://fzglch.github.io/\">我的静态博客</a>！祝你天天开心，心想事成</p>\n<h2 id=\"大致说明\"><a class=\"markdownIt-Anchor\" href=\"#大致说明\">#</a> 大致说明</h2>\n<h3 id=\"关于背景音乐\"><a class=\"markdownIt-Anchor\" href=\"#关于背景音乐\">#</a> 关于背景音乐</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>页面的最右边的播放按钮可播放博客音乐歌单，页面下滑后右下角也可以播放或者查看歌单列表  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>歌单动态更新哦，一般是选的比较安静让人心情好的音乐，播放源来自网易云音乐~</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"关于夜间模式\"><a class=\"markdownIt-Anchor\" href=\"#关于夜间模式\">#</a> 关于夜间模式</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>右上角可以切换夜间模式与否，减低屏幕对眼睛的伤害，尤其是在晚上没有开灯房间漫射光不足的时候</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFNSVBNCU5QyVFOSU5NiU5MyVFNiVBOCVBMSVFNSVCQyU4Rg==\">夜间模式–中文维基百科</span></p>\n<h3 id=\"关于左下角人物\"><a class=\"markdownIt-Anchor\" href=\"#关于左下角人物\">#</a> 关于左下角人物</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>这是live2d官网发布的人物，目前并博客没有编辑让她说话，没记错的话名字是叫shizuku  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>指“雫”，中文念“xià”，现代汉语不使用此字  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>它的日语意思与康熙字典中的不同，日语中是水滴的意思，也可以理解为下落的雨滴，是比较常见的名字</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"关于左侧动态头像\"><a class=\"markdownIt-Anchor\" href=\"#关于左侧动态头像\">#</a> 关于左侧动态头像</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>源自2015龙珠剧场版神与神中其初现的特写画面</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC9iYWlrZS0lRTQlQjglODMlRTklQkUlOEQlRTclOEYlQTBaXyVFNyVBNSU5RSVFOCU4OCU4NyVFNyVBNSU5RT93cHJvdj1zcnB3MV8w\">龙珠 Z 剧场版神与神–中文维基百科</span></p>\n<h3 id=\"关于左侧各平台连接\"><a class=\"markdownIt-Anchor\" href=\"#关于左侧各平台连接\">#</a> 关于左侧各平台连接</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>点击后会进入对应的链接，不过并没有贴入自己的其他平台账号连接，可能以后会贴上其他人的blog的友链</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        }
    ]
}