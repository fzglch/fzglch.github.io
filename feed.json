{
    "version": "https://jsonfeed.org/version/1",
    "title": "Darlin' 夢が叶ったの",
    "description": "",
    "home_page_url": "https://fzglch.github.io",
    "items": [
        {
            "id": "https://fzglch.github.io/2021/07/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "url": "https://fzglch.github.io/2021/07/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "title": "面向对象",
            "date_published": "2021-07-19T10:20:34.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/07/19/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/",
            "url": "https://fzglch.github.io/2021/07/19/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/",
            "title": "算法导论",
            "date_published": "2021-07-19T10:20:14.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/07/19/%E5%85%B7%E4%BD%93%E6%95%B0%E5%AD%A6/",
            "url": "https://fzglch.github.io/2021/07/19/%E5%85%B7%E4%BD%93%E6%95%B0%E5%AD%A6/",
            "title": "具体数学",
            "date_published": "2021-07-19T10:19:45.000Z",
            "content_html": "<h2 id=\"一-递归问题\"><a class=\"markdownIt-Anchor\" href=\"#一-递归问题\">#</a> 一、递归问题</h2>\n<h3 id=\"河内塔\"><a class=\"markdownIt-Anchor\" href=\"#河内塔\">#</a> 河内塔</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1883</span>年法国某人整的活，故事说是有64层这玩意儿，有智者（简称zz）夜以继日的搬，搬完就是世界毁灭的时刻</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>搬n层的过程，首先把n-1层放好，再把最底层放对，然后这n-1层再挪过去</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>记搬n层为T（n）次步骤，可得T（n） <span class=\"token operator\">=</span> <span class=\"token number\">2</span>*T（n-1）+1，T1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>，T2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span>；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>然后用离散的方法或者数学归纳法可得：Tn <span class=\"token operator\">=</span> <span class=\"token number\">2</span>^n - <span class=\"token number\">1</span> ；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>然后64层就是1.8 x <span class=\"token number\">10</span>^19次，按夜以继日且一秒搬成功一次，需要5亿多年</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>这节的内容就结束了</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>那么结合这章的题目“递归问题”，递归在这个问题上体会在哪儿呢？答案是没有，完全是迭代</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>但我们用程序写这个搬的步骤，就可以有的</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>比如写成这种：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>void go<span class=\"token punctuation\">(</span>n,A,B,C<span class=\"token punctuation\">)</span>//n层，从A到C，B是中转用的那个</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    if<span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">return</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>//这步是递归边界</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    go<span class=\"token punctuation\">(</span>n-1,A,C,B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">;</span>//这步搬底盘</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    go<span class=\"token punctuation\">(</span>n-1,B,A,C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"平面上的直线\"><a class=\"markdownIt-Anchor\" href=\"#平面上的直线\">#</a> 平面上的直线</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>这个问题是讲n条直线最多可以把一个平面分成多少个区域</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>首先，假设第n条直线对k个区域进行了分割，它与之前n-1条直线最多n-1个交点，故k<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>而当所有直线均不存在平行情况且交点不重叠时，k<span class=\"token operator\">=</span>n；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>有 L（n）<span class=\"token operator\">=</span>L（n-1）+ n；L1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span>；L2 <span class=\"token operator\">=</span> <span class=\"token number\">4</span>；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>故L（n）<span class=\"token operator\">=</span> n*<span class=\"token punctuation\">(</span>n-1<span class=\"token punctuation\">)</span>/2 + <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>那么这节和递归什么关系呢？没找到，全节就“递归式”一词和递归有点关系，且上述证明过程不够严谨，这节的标题起的也不够好，太广了不够明确</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"约瑟夫问题\"><a class=\"markdownIt-Anchor\" href=\"#约瑟夫问题\">#</a> 约瑟夫问题</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"二-和式\"><a class=\"markdownIt-Anchor\" href=\"#二-和式\">#</a> 二、和式</h2>\n<h3 id=\"河内塔-2\"><a class=\"markdownIt-Anchor\" href=\"#河内塔-2\">#</a> 河内塔</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"平面上的直线-2\"><a class=\"markdownIt-Anchor\" href=\"#平面上的直线-2\">#</a> 平面上的直线</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"约瑟夫问题-2\"><a class=\"markdownIt-Anchor\" href=\"#约瑟夫问题-2\">#</a> 约瑟夫问题</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/07/19/%E7%99%BD%E4%B9%A6%E8%A1%A5%E5%85%A8%E8%AE%A1%E5%88%92/",
            "url": "https://fzglch.github.io/2021/07/19/%E7%99%BD%E4%B9%A6%E8%A1%A5%E5%85%A8%E8%AE%A1%E5%88%92/",
            "title": "白书补全计划",
            "date_published": "2021-07-19T10:19:27.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/07/19/Little-Pony-and-Harmony-Chest/",
            "url": "https://fzglch.github.io/2021/07/19/Little-Pony-and-Harmony-Chest/",
            "title": "Little Pony and Harmony Chest",
            "date_published": "2021-07-19T10:11:47.000Z",
            "content_html": "<p>*2000，状压</p>\n<h2 id=\"源码1\"><a class=\"markdownIt-Anchor\" href=\"#源码1\">#</a> 源码 1</h2>\n<h3 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"源码2\"><a class=\"markdownIt-Anchor\" href=\"#源码2\">#</a> 源码 2</h2>\n<h3 id=\"源码-2\"><a class=\"markdownIt-Anchor\" href=\"#源码-2\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-2\"><a class=\"markdownIt-Anchor\" href=\"#分析-2\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/07/19/%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86%E7%82%B9B/",
            "url": "https://fzglch.github.io/2021/07/19/%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86%E7%82%B9B/",
            "title": "入门知识点B",
            "date_published": "2021-07-19T07:50:21.000Z",
            "content_html": "<h2 id=\"二分图匹配\"><a class=\"markdownIt-Anchor\" href=\"#二分图匹配\">#</a> 二分图匹配</h2>\n<h3 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"最小路径覆盖\"><a class=\"markdownIt-Anchor\" href=\"#最小路径覆盖\">#</a> 最小路径覆盖</h2>\n<h3 id=\"源码-2\"><a class=\"markdownIt-Anchor\" href=\"#源码-2\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-2\"><a class=\"markdownIt-Anchor\" href=\"#分析-2\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"网络流\"><a class=\"markdownIt-Anchor\" href=\"#网络流\">#</a> 网络流</h2>\n<h3 id=\"源码-3\"><a class=\"markdownIt-Anchor\" href=\"#源码-3\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-3\"><a class=\"markdownIt-Anchor\" href=\"#分析-3\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"最小费用流\"><a class=\"markdownIt-Anchor\" href=\"#最小费用流\">#</a> 最小费用流</h2>\n<h3 id=\"源码-4\"><a class=\"markdownIt-Anchor\" href=\"#源码-4\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-4\"><a class=\"markdownIt-Anchor\" href=\"#分析-4\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"线段树\"><a class=\"markdownIt-Anchor\" href=\"#线段树\">#</a> 线段树</h2>\n<h3 id=\"源码-5\"><a class=\"markdownIt-Anchor\" href=\"#源码-5\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-5\"><a class=\"markdownIt-Anchor\" href=\"#分析-5\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"并查集\"><a class=\"markdownIt-Anchor\" href=\"#并查集\">#</a> 并查集</h2>\n<h3 id=\"源码-6\"><a class=\"markdownIt-Anchor\" href=\"#源码-6\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-6\"><a class=\"markdownIt-Anchor\" href=\"#分析-6\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"lcs\"><a class=\"markdownIt-Anchor\" href=\"#lcs\">#</a> LCS</h2>\n<h3 id=\"源码-7\"><a class=\"markdownIt-Anchor\" href=\"#源码-7\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-7\"><a class=\"markdownIt-Anchor\" href=\"#分析-7\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"最长递增子串\"><a class=\"markdownIt-Anchor\" href=\"#最长递增子串\">#</a> 最长递增子串</h2>\n<h3 id=\"源码-8\"><a class=\"markdownIt-Anchor\" href=\"#源码-8\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-8\"><a class=\"markdownIt-Anchor\" href=\"#分析-8\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"三角剖分\"><a class=\"markdownIt-Anchor\" href=\"#三角剖分\">#</a> 三角剖分</h2>\n<h3 id=\"源码-9\"><a class=\"markdownIt-Anchor\" href=\"#源码-9\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-9\"><a class=\"markdownIt-Anchor\" href=\"#分析-9\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"记忆化dp\"><a class=\"markdownIt-Anchor\" href=\"#记忆化dp\">#</a> 记忆化 dp</h2>\n<h3 id=\"源码-10\"><a class=\"markdownIt-Anchor\" href=\"#源码-10\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-10\"><a class=\"markdownIt-Anchor\" href=\"#分析-10\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"博奕树\"><a class=\"markdownIt-Anchor\" href=\"#博奕树\">#</a> 博奕树</h2>\n<h3 id=\"源码-11\"><a class=\"markdownIt-Anchor\" href=\"#源码-11\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-11\"><a class=\"markdownIt-Anchor\" href=\"#分析-11\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"二进制法博弈\"><a class=\"markdownIt-Anchor\" href=\"#二进制法博弈\">#</a> 二进制法博弈</h2>\n<h3 id=\"源码-12\"><a class=\"markdownIt-Anchor\" href=\"#源码-12\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-12\"><a class=\"markdownIt-Anchor\" href=\"#分析-12\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"最大团\"><a class=\"markdownIt-Anchor\" href=\"#最大团\">#</a> 最大团</h2>\n<h3 id=\"源码-13\"><a class=\"markdownIt-Anchor\" href=\"#源码-13\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-13\"><a class=\"markdownIt-Anchor\" href=\"#分析-13\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"最大独立集\"><a class=\"markdownIt-Anchor\" href=\"#最大独立集\">#</a> 最大独立集</h2>\n<h3 id=\"源码-14\"><a class=\"markdownIt-Anchor\" href=\"#源码-14\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-14\"><a class=\"markdownIt-Anchor\" href=\"#分析-14\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"判断点在多边形内\"><a class=\"markdownIt-Anchor\" href=\"#判断点在多边形内\">#</a> 判断点在多边形内</h2>\n<h3 id=\"源码-15\"><a class=\"markdownIt-Anchor\" href=\"#源码-15\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-15\"><a class=\"markdownIt-Anchor\" href=\"#分析-15\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"差分约束系统\"><a class=\"markdownIt-Anchor\" href=\"#差分约束系统\">#</a> 差分约束系统</h2>\n<h3 id=\"源码-16\"><a class=\"markdownIt-Anchor\" href=\"#源码-16\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-16\"><a class=\"markdownIt-Anchor\" href=\"#分析-16\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"双向广度搜索\"><a class=\"markdownIt-Anchor\" href=\"#双向广度搜索\">#</a> 双向广度搜索</h2>\n<h3 id=\"源码-17\"><a class=\"markdownIt-Anchor\" href=\"#源码-17\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-17\"><a class=\"markdownIt-Anchor\" href=\"#分析-17\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"a算法\"><a class=\"markdownIt-Anchor\" href=\"#a算法\">#</a> A * 算法</h2>\n<h3 id=\"源码-18\"><a class=\"markdownIt-Anchor\" href=\"#源码-18\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-18\"><a class=\"markdownIt-Anchor\" href=\"#分析-18\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"最小耗散优先\"><a class=\"markdownIt-Anchor\" href=\"#最小耗散优先\">#</a> 最小耗散优先</h2>\n<h3 id=\"源码-19\"><a class=\"markdownIt-Anchor\" href=\"#源码-19\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-19\"><a class=\"markdownIt-Anchor\" href=\"#分析-19\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/07/19/%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86%E7%82%B9A/",
            "url": "https://fzglch.github.io/2021/07/19/%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86%E7%82%B9A/",
            "title": "入门知识点A",
            "date_published": "2021-07-19T07:50:02.000Z",
            "content_html": "<h2 id=\"最短路径\"><a class=\"markdownIt-Anchor\" href=\"#最短路径\">#</a> 最短路径</h2>\n<h3 id=\"floyd\"><a class=\"markdownIt-Anchor\" href=\"#floyd\">#</a> Floyd</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>全源最短路径，复杂度o<span class=\"token punctuation\">(</span>n^3^<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>直接粘个百度百科的</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#include&lt;iostream></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#include&lt;vector></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>const int <span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">INF</span><span class=\"token operator\">=</span><span class=\"token number\">100000000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>void floyd<span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>distmap,//可被更新的邻接矩阵，更新后不能确定原有边</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>path<span class=\"token punctuation\">)</span>//路径上到达该点的中转点</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>//福利：这个函数没有用除INF外的任何全局量，可以直接复制！</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    const int <span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">NODE</span><span class=\"token operator\">=</span>distmap.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//用邻接矩阵的大小传递顶点个数，减少参数传递</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    path.assign<span class=\"token punctuation\">(</span>NODE,vector<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>NODE,-1<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//初始化路径数组 </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    for<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">k</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">!=</span>NODE<span class=\"token punctuation\">;</span> ++k<span class=\"token punctuation\">)</span>//对于每一个中转点</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        for<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">!=</span>NODE<span class=\"token punctuation\">;</span> ++i<span class=\"token punctuation\">)</span>//枚举源点</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            for<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">j</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">!=</span>NODE<span class=\"token punctuation\">;</span> ++j<span class=\"token punctuation\">)</span>//枚举终点</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                if<span class=\"token punctuation\">(</span>distmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>distmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>+distmap<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>//不满足三角不等式</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    distmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>distmap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>+distmap<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>//更新</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>k<span class=\"token punctuation\">;</span>//记录路径</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>void print<span class=\"token punctuation\">(</span>const int <span class=\"token operator\">&amp;</span>beg,const int <span class=\"token operator\">&amp;</span>end,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>           const vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>path<span class=\"token punctuation\">)</span>//传引用，避免拷贝，不占用内存空间</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>           //也可以用栈结构先进后出的特性来代替函数递归 </pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    if<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        print<span class=\"token punctuation\">(</span>beg,path<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span>,path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        print<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span>,end,path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"->\"</span><span class=\"token operator\">&lt;&lt;</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    int n_num,e_num,beg,end<span class=\"token punctuation\">;</span>//含义见下</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"（不处理负权回路）输入点数、边数：\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    cin<span class=\"token operator\">>></span>n_num<span class=\"token operator\">>></span>e_num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> <span class=\"token operator\">></span> path,</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          distmap<span class=\"token punctuation\">(</span>n_num,vector<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>n_num,INF<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>//默认初始化邻接矩阵</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    for<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>,p,q<span class=\"token punctuation\">;</span> i<span class=\"token operator\">!=</span>e_num<span class=\"token punctuation\">;</span> ++i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"输入第\"</span><span class=\"token operator\">&lt;&lt;</span>i+<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token string\">\"条边的起点、终点、长度（100000000代表无穷大，不联通）：\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        cin<span class=\"token operator\">>></span>p<span class=\"token operator\">>></span>q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        cin<span class=\"token operator\">>></span>distmap<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    floyd<span class=\"token punctuation\">(</span>distmap,path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"计算完毕，可以开始查询，请输入出发点和终点：\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    cin<span class=\"token operator\">>></span>beg<span class=\"token operator\">>></span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"最短距离为\"</span><span class=\"token operator\">&lt;&lt;</span>distmap<span class=\"token punctuation\">[</span>beg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"，打印路径：\"</span><span class=\"token operator\">&lt;&lt;</span>beg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    print<span class=\"token punctuation\">(</span>beg,end,path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9GbG95ZCVFNyVBRSU5NyVFNiVCMyU5NS8yOTE5OTA/ZnI9YWxhZGRpbg==\">floyd 算法–百度百科</span></p>\n<h3 id=\"dijstra\"><a class=\"markdownIt-Anchor\" href=\"#dijstra\">#</a> Dijstra</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>每次对集合内所有点做一次类似BFS的操作，然后在所有结果中选最小的那一个</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>单源最短路径,复杂度o<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"dijstra的堆优化\"><a class=\"markdownIt-Anchor\" href=\"#dijstra的堆优化\">#</a> Dijstra 的堆优化</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>用于稀疏图而非稠密图</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>复杂度o<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"bellman\"><a class=\"markdownIt-Anchor\" href=\"#bellman\">#</a> Bellman</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"大数高精度\"><a class=\"markdownIt-Anchor\" href=\"#大数高精度\">#</a> 大数 &amp; 高精度</h2>\n<h3 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include &lt;bits/stdc++.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>class Operation</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>public:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-name function\">Operation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>                                  //默认构造函数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    bool cmp<span class=\"token punctuation\">(</span>string a, string b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   //比较两个“数字”的大小</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    void Carry<span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span>c, int t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   //进位操作，当某一位超过十是使用此函数进位</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    string Add<span class=\"token punctuation\">(</span>string a, string b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 //大数加法</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    string Less<span class=\"token punctuation\">(</span>string a, string b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                //大数减法</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    string Multiply<span class=\"token punctuation\">(</span>string a, string b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            //大数乘法</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    string Except_Judge<span class=\"token punctuation\">(</span>string a, string b, int n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //大数除法模式选择（大数小或小除大）</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    string Except_A<span class=\"token punctuation\">(</span>string a, string b, int n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     //大除小</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    string Except_B<span class=\"token punctuation\">(</span>string a, string b, int n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     //小除大高精度除法，其中n为自定义的小数位数</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    string Module<span class=\"token punctuation\">(</span>string a, string b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              //大数求模</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>/*比较大小*/</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>bool Operation::cmp<span class=\"token punctuation\">(</span>string a, string b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> b.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> //首先比较长度</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>         //长度大的肯定大</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> b.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span> //若长度相等可直接比较</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>/*进位操作*/</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>void Operation::Carry<span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span>c, int t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> c.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> t++<span class=\"token punctuation\">)</span> //遍历寻找大于十的位</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> - <span class=\"token string\">'0'</span> <span class=\"token operator\">></span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> //如果大于十</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            int size_s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            int sum_s <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>t + size_s<span class=\"token punctuation\">]</span> - <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span> //该位所代表的数字</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sum_s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size_s <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    c<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum_s % <span class=\"token number\">10</span> + <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span> //当前位</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    c<span class=\"token punctuation\">[</span>t + size_s<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> sum_s % <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> //后位</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                sum_s /<span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                size_s++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>/*大数相加*/</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>string Operation::Add<span class=\"token punctuation\">(</span>string a, string b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    string c<span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">(</span>a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, b.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> + <span class=\"token number\">1</span>, <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //初始化结果字符串</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    reverse<span class=\"token punctuation\">(</span>a.begin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, a.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>                //反转字符串</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    reverse<span class=\"token punctuation\">(</span>b.begin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, b.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> b.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> //补零，使两串长度相等</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        a.insert<span class=\"token punctuation\">(</span>a.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, b.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> - a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        b.insert<span class=\"token punctuation\">(</span>b.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> - b.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> //按位相加</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        int size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        int <span class=\"token function\">sum</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> - <span class=\"token string\">'0'</span> + b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> - <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            c<span class=\"token punctuation\">[</span>i + size<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token function\">sum</span> % <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>i + size<span class=\"token punctuation\">]</span> - <span class=\"token string\">'0'</span> <span class=\"token operator\">></span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                Carry<span class=\"token punctuation\">(</span>c, i + size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //进位</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            size++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token function\">sum</span> /<span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    reverse<span class=\"token punctuation\">(</span>c.begin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, c.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>            //反转</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    c <span class=\"token operator\">=</span> c.substr<span class=\"token punctuation\">(</span>c.find_first_not_of<span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span> //去除多余的前导零</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>/*大数相减*/</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>string Operation::Less<span class=\"token punctuation\">(</span>string a, string b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span> //剪枝，如果相等直接返回零</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    bool flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    string c<span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">(</span>a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, b.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> + <span class=\"token number\">1</span>, <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">))</span> //始终保持a <span class=\"token operator\">></span> b，并记录初始a，b的关系以便确定结果的符号</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        swap<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    reverse<span class=\"token punctuation\">(</span>a.begin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, a.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    reverse<span class=\"token punctuation\">(</span>b.begin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, b.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    b.insert<span class=\"token punctuation\">(</span>b.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> - b.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> //按位相减</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> //不够则借数，想象一些列竖式做减法</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int j <span class=\"token operator\">=</span> i + <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span><span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                    a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> -<span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int t <span class=\"token operator\">=</span> j - <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">></span> i<span class=\"token punctuation\">;</span> t--<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                        a<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> - b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    reverse<span class=\"token punctuation\">(</span>c.begin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, c.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    c <span class=\"token operator\">=</span> c.substr<span class=\"token punctuation\">(</span>c.find_first_not_of<span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> //如果，a小于b，在结果串的前面加负号</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        c.insert<span class=\"token punctuation\">(</span>c.begin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>/*大数相乘*/</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>string Operation::Multiply<span class=\"token punctuation\">(</span>string a, string b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">))</span> //保证a <span class=\"token operator\">></span> b</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        swap<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    string c<span class=\"token punctuation\">(</span>a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> + b.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> + <span class=\"token number\">1</span>, <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    reverse<span class=\"token punctuation\">(</span>a.begin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, a.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    reverse<span class=\"token punctuation\">(</span>b.begin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, b.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> //一串的任一位与另一串的所有位依次相乘</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> a.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            int size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            int <span class=\"token function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> - <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> * <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> - <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>            //int ant <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>i + j<span class=\"token punctuation\">]</span> + <span class=\"token function\">sum</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                c<span class=\"token punctuation\">[</span>i + j + size<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token function\">sum</span> % <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>i + j + size<span class=\"token punctuation\">]</span> - <span class=\"token string\">'0'</span> <span class=\"token operator\">></span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> //进位</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                    Carry<span class=\"token punctuation\">(</span>c, i + j + size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                size++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>                <span class=\"token function\">sum</span> /<span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    reverse<span class=\"token punctuation\">(</span>c.begin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, c.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    c <span class=\"token operator\">=</span> c.substr<span class=\"token punctuation\">(</span>c.find_first_not_of<span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>/*大数相除判断*/</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>string Operation::Except_Judge<span class=\"token punctuation\">(</span>string a, string b, int n<span class=\"token punctuation\">)</span> //用来判断是大除小还是小除大</pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token string\">\"ERROR\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> Except_B<span class=\"token punctuation\">(</span>a, b, n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> Except_A<span class=\"token punctuation\">(</span>a, b, n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>/*大除小*/</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>string Operation::Except_A<span class=\"token punctuation\">(</span>string a, string b, int n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    string c<span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>, d <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    string e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    string s<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cmp<span class=\"token punctuation\">(</span>a, d<span class=\"token punctuation\">))</span>                    //剪枝，将除数扩大到小于被除数的最大值（每次扩大十倍）</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        d.insert<span class=\"token punctuation\">(</span>d.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>, s <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span> //补零（相当于扩大十倍）</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    d.pop_back<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                         //根据循环最后会多补一个零，所以再去掉</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    s.pop_back<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cmp<span class=\"token punctuation\">(</span>d, b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> d <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cmp<span class=\"token punctuation\">(</span>a, d<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            a <span class=\"token operator\">=</span> Less<span class=\"token punctuation\">(</span>a, d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //将除法转化为减法</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>            c <span class=\"token operator\">=</span> Add<span class=\"token punctuation\">(</span>c, s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  //商增加（利用加法）</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span>   //整除，直接跳出</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>                <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token keyword\">else</span> //否则减小除数的值</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>            d.pop_back<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>            s.pop_back<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> //如果有小数位要求，将余数和除数作为被除数与除数进行小除大的运算</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        e <span class=\"token operator\">=</span> Except_B<span class=\"token punctuation\">(</span>a, b, n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        e.erase<span class=\"token punctuation\">(</span>e.begin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span> //最后返回的字符串形式为“0.xxxxxxxx”，此操作将消去小数点前的零</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        c <span class=\"token operator\">+=</span> e<span class=\"token punctuation\">;</span>             //两串相加</pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>/*小除大*/</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>string Operation::Except_B<span class=\"token punctuation\">(</span>string a, string b, int n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    int t <span class=\"token operator\">=</span> -1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>    string c<span class=\"token punctuation\">(</span><span class=\"token string\">\"0.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>        c.insert<span class=\"token punctuation\">(</span>c.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, n, <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> n <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">!=</span> <span class=\"token string\">\"00\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>        int l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">))</span> //补零，相当于除法中不够除时添加零</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>            a <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">></span><span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>                c <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>            t++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>        //if <span class=\"token punctuation\">(</span>t <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> c <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>        //t++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cmp<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">))</span> //转化为减法</pre></td></tr><tr><td data-num=\"223\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>            a <span class=\"token operator\">=</span> Less<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>            l++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> //如果有商</pre></td></tr><tr><td data-num=\"228\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>            a <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>     //补零</pre></td></tr><tr><td data-num=\"230\"></td><td><pre>            c <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span> + l<span class=\"token punctuation\">;</span> //结果串加商</pre></td></tr><tr><td data-num=\"231\"></td><td><pre>            t++<span class=\"token punctuation\">;</span>          //位数加一</pre></td></tr><tr><td data-num=\"232\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> - <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span>                           //如果不能得到需要的位数，例如1/2 <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span>，要求三位小数的话达不到</pre></td></tr><tr><td data-num=\"235\"></td><td><pre>        c.insert<span class=\"token punctuation\">(</span>c.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>, n - <span class=\"token punctuation\">(</span>c.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> - <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> //在末尾补零</pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>/*求模*/</pre></td></tr><tr><td data-num=\"240\"></td><td><pre>string Operation::Module<span class=\"token punctuation\">(</span>string a, string b<span class=\"token punctuation\">)</span> //很简单，利用减法循环相减，不能减了剩下的就是余数</pre></td></tr><tr><td data-num=\"241\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cmp<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cmp<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>            a <span class=\"token operator\">=</span> Less<span class=\"token punctuation\">(</span>a, b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>int main<span class=\"token punctuation\">(</span>int argc, char *argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>    string str1, str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>    char a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>    int n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>        cin <span class=\"token operator\">>></span> str1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>        cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>        cin <span class=\"token operator\">>></span> str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>            cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        Operation demo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>        switch <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"相加等于：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl</pre></td></tr><tr><td data-num=\"272\"></td><td><pre>                 <span class=\"token operator\">&lt;&lt;</span> demo.Add<span class=\"token punctuation\">(</span>str1, str2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>            <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"相减等于：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl</pre></td></tr><tr><td data-num=\"276\"></td><td><pre>                 <span class=\"token operator\">&lt;&lt;</span> demo.Less<span class=\"token punctuation\">(</span>str1, str2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>            <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"相乘等于：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl</pre></td></tr><tr><td data-num=\"280\"></td><td><pre>                 <span class=\"token operator\">&lt;&lt;</span> demo.Multiply<span class=\"token punctuation\">(</span>str1, str2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>            <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"相除等于：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl</pre></td></tr><tr><td data-num=\"284\"></td><td><pre>                 <span class=\"token operator\">&lt;&lt;</span> demo.Except_Judge<span class=\"token punctuation\">(</span>str1, str2, n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>            <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'%'</span><span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"求模等于：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl</pre></td></tr><tr><td data-num=\"288\"></td><td><pre>                 <span class=\"token operator\">&lt;&lt;</span> demo.Module<span class=\"token punctuation\">(</span>str1, str2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>            <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>        default:</pre></td></tr><tr><td data-num=\"291\"></td><td><pre>            <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>    system<span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9mMzM0NTY1OTY2NGE=\">搬运</span></p>\n<h3 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"任意多边形面积\"><a class=\"markdownIt-Anchor\" href=\"#任意多边形面积\">#</a> 任意多边形面积</h2>\n<h3 id=\"源码-2\"><a class=\"markdownIt-Anchor\" href=\"#源码-2\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>struct Point2d</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    double x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    double y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Point2d<span class=\"token punctuation\">(</span>double xx, double yy<span class=\"token punctuation\">)</span>: x<span class=\"token punctuation\">(</span>xx<span class=\"token punctuation\">)</span>, y<span class=\"token punctuation\">(</span>yy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//计算任意多边形的面积，顶点按照顺时针或者逆时针方向排列</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>double ComputePolygonArea<span class=\"token punctuation\">(</span>const vector<span class=\"token operator\">&lt;</span>Point2d<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>points<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    int point_num <span class=\"token operator\">=</span> points.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    if<span class=\"token punctuation\">(</span>point_num <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>return <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    double s <span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.y * <span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">[</span>point_num-1<span class=\"token punctuation\">]</span>.x - points<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>.x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    for<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> point_num<span class=\"token punctuation\">;</span> ++i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        s <span class=\"token operator\">+=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.y * <span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span>.x - points<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i+1<span class=\"token punctuation\">)</span>%point_num<span class=\"token punctuation\">]</span>.x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> fabs<span class=\"token punctuation\">(</span>s/2.0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yODU1NDQ3MzE=\">S</span></p>\n<h3 id=\"分析-2\"><a class=\"markdownIt-Anchor\" href=\"#分析-2\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"凸包\"><a class=\"markdownIt-Anchor\" href=\"#凸包\">#</a> 凸包</h2>\n<h3 id=\"源码-3\"><a class=\"markdownIt-Anchor\" href=\"#源码-3\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-3\"><a class=\"markdownIt-Anchor\" href=\"#分析-3\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"叉乘\"><a class=\"markdownIt-Anchor\" href=\"#叉乘\">#</a> 叉乘</h2>\n<h3 id=\"源码-4\"><a class=\"markdownIt-Anchor\" href=\"#源码-4\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-4\"><a class=\"markdownIt-Anchor\" href=\"#分析-4\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"二分查找\"><a class=\"markdownIt-Anchor\" href=\"#二分查找\">#</a> 二分查找</h2>\n<h3 id=\"源码-5\"><a class=\"markdownIt-Anchor\" href=\"#源码-5\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-5\"><a class=\"markdownIt-Anchor\" href=\"#分析-5\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"最小生成树p算法\"><a class=\"markdownIt-Anchor\" href=\"#最小生成树p算法\">#</a> 最小生成树 P 算法</h2>\n<h3 id=\"源码-6\"><a class=\"markdownIt-Anchor\" href=\"#源码-6\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-6\"><a class=\"markdownIt-Anchor\" href=\"#分析-6\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"线段相交与否及交点\"><a class=\"markdownIt-Anchor\" href=\"#线段相交与否及交点\">#</a> 线段相交与否及交点</h2>\n<h3 id=\"源码-7\"><a class=\"markdownIt-Anchor\" href=\"#源码-7\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-7\"><a class=\"markdownIt-Anchor\" href=\"#分析-7\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"任意进制转换\"><a class=\"markdownIt-Anchor\" href=\"#任意进制转换\">#</a> 任意进制转换</h2>\n<h3 id=\"源码-8\"><a class=\"markdownIt-Anchor\" href=\"#源码-8\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-8\"><a class=\"markdownIt-Anchor\" href=\"#分析-8\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/07/09/ccf21-4/",
            "url": "https://fzglch.github.io/2021/07/09/ccf21-4/",
            "title": "ccf21.4",
            "date_published": "2021-07-08T16:28:14.000Z",
            "content_html": "<h2 id=\"1\"><a class=\"markdownIt-Anchor\" href=\"#1\">#</a> 1</h2>\n<h3 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;bits/stdc++.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>typedef long long  ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>const int mod <span class=\"token operator\">=</span> 1e9 + <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>//998244353<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>const int inf <span class=\"token operator\">=</span> 1e9 + <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>const ll INF <span class=\"token operator\">=</span> 1e18 + <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#define forn(i, n) for (int i = 0; i &lt; int(n); i++)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tstd::ios::sync_with_stdio<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    std::cin.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>std::cout.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    int n,m,l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tcin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>m<span class=\"token operator\">>></span>l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tint a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tint h<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tmemset<span class=\"token punctuation\">(</span>h,0,sizeof<span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tforn<span class=\"token punctuation\">(</span>i,n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tforn<span class=\"token punctuation\">(</span>j,m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\tcin<span class=\"token operator\">>></span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\th<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tforn<span class=\"token punctuation\">(</span>i,l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tcout<span class=\"token operator\">&lt;&lt;</span>h<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>签到题</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>第一题的特点：签到题</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"2\"><a class=\"markdownIt-Anchor\" href=\"#2\">#</a> 2</h2>\n<h3 id=\"源码-2\"><a class=\"markdownIt-Anchor\" href=\"#源码-2\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;bits/stdc++.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>typedef long long  ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>const int mod <span class=\"token operator\">=</span> 1e9 + <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>//998244353<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>const int inf <span class=\"token operator\">=</span> 1e9 + <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>const ll INF <span class=\"token operator\">=</span> 1e18 + <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#define forn(i, n) for (int i = 0; i &lt; int(n); i++)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#define forn1(i, n) for (int i = 1; i &lt; int(n); i++)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tstd::ios::sync_with_stdio<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    std::cin.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>std::cout.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    int n,l,r,t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>l<span class=\"token operator\">>></span>r<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    int a<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>,b<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    forn<span class=\"token punctuation\">(</span>i,n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    \tforn<span class=\"token punctuation\">(</span>j,n<span class=\"token punctuation\">)</span> cin<span class=\"token operator\">>></span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tforn<span class=\"token punctuation\">(</span>i,n<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tforn1<span class=\"token punctuation\">(</span>i,n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tforn<span class=\"token punctuation\">(</span>j,n<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> + a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tforn<span class=\"token punctuation\">(</span>i,n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tforn1<span class=\"token punctuation\">(</span>j,n<span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-1<span class=\"token punctuation\">]</span> + b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tdouble s,area,avl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tint <span class=\"token assign-left variable\">ans</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tforn<span class=\"token punctuation\">(</span>i,n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    \tforn<span class=\"token punctuation\">(</span>j,n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    \t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    \t\t<span class=\"token assign-left variable\">s</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">(</span>i+r,n-1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">(</span>j+r,n-1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    \t\tif<span class=\"token punctuation\">(</span>i-r<span class=\"token operator\">></span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j-r<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> s <span class=\"token operator\">+=</span> b<span class=\"token punctuation\">[</span>i-r-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-r-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    \t\tif<span class=\"token punctuation\">(</span>i-r<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> s-<span class=\"token operator\">=</span>b<span class=\"token punctuation\">[</span>i-r-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">(</span>j+r,n-1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    \t\tif<span class=\"token punctuation\">(</span>j-r<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> s-<span class=\"token operator\">=</span>b<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">(</span>i+r,n-1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-r-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    \t\tarea <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> min<span class=\"token punctuation\">(</span>i+r,n-1<span class=\"token punctuation\">)</span>-max<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,i-r<span class=\"token punctuation\">)</span>+1 <span class=\"token punctuation\">)</span> * <span class=\"token punctuation\">(</span> min<span class=\"token punctuation\">(</span>j+r,n-1<span class=\"token punctuation\">)</span>-max<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,j-r<span class=\"token punctuation\">)</span>+1 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    \t\tavl <span class=\"token operator\">=</span> s/area<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    \t\tif<span class=\"token punctuation\">(</span>avl<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">)</span> ans++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-2\"><a class=\"markdownIt-Anchor\" href=\"#分析-2\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>整个二维前缀数组就行，如果要改变中途数值就难些了，嘚写二维线段树</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>一定要想好思路再写</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>第二题的特点：只要时间复杂度不是很暴力就满分</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"3\"><a class=\"markdownIt-Anchor\" href=\"#3\">#</a> 3</h2>\n<h3 id=\"源码-3\"><a class=\"markdownIt-Anchor\" href=\"#源码-3\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;bits/stdc++.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>typedef long long  ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>const int mod <span class=\"token operator\">=</span> 1e9 + <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>//998244353<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>const int inf <span class=\"token operator\">=</span> 1e9 + <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>const ll INF <span class=\"token operator\">=</span> 1e18 + <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>const int N <span class=\"token operator\">=</span> <span class=\"token number\">10005</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>int n,tdef,tmax,tmin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#define forn(i, n) for (int i = 0; i &lt; int(n); i++)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#define forn1(i, n) for (int i = 1; i &lt; int(n); i++)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>struct <span class=\"token function\">ip</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tint state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t//0:未分配，1：待分配 </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t//2：占用， <span class=\"token number\">3</span>：过期</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstring zyz <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tint gqsk <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span>ips<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>void update_ips_state<span class=\"token punctuation\">(</span>int tc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    //对所有ip更新</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    forn1<span class=\"token punctuation\">(</span>i,n+1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        //如果ip的过期时刻大于0，并且过期了</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        if<span class=\"token punctuation\">(</span>ips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.gqsk <span class=\"token operator\">&amp;&amp;</span> ips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.gqsk<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span> tc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            if<span class=\"token punctuation\">(</span>ips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.state <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                ips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.state<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                ips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.zyz<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                ips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.gqsk<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                ips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.state<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                ips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.gqsk<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tstd::ios::sync_with_stdio<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    std::cin.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>std::cout.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    string h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    cin<span class=\"token operator\">>></span>n<span class=\"token operator\">>></span>tdef<span class=\"token operator\">>></span>tmax<span class=\"token operator\">>></span>tmin<span class=\"token operator\">>></span>h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    int t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    cin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    int ti,ad,gq<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    string se,re,ty<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    while<span class=\"token punctuation\">(</span>t--<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    \tcin<span class=\"token operator\">>></span>ti<span class=\"token operator\">>></span>se<span class=\"token operator\">>></span>re<span class=\"token operator\">>></span>ty<span class=\"token operator\">>></span>ad<span class=\"token operator\">>></span>gq<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>re<span class=\"token operator\">!=</span>h <span class=\"token operator\">&amp;&amp;</span> re<span class=\"token operator\">!=</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>ty<span class=\"token operator\">!=</span><span class=\"token string\">\"REQ\"</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>ty<span class=\"token operator\">!=</span><span class=\"token string\">\"REQ\"</span> <span class=\"token operator\">&amp;&amp;</span> ty<span class=\"token operator\">!=</span><span class=\"token string\">\"DIS\"</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>re<span class=\"token operator\">==</span><span class=\"token string\">\"*\"</span> <span class=\"token operator\">&amp;&amp;</span> ty<span class=\"token operator\">!=</span><span class=\"token string\">\"DIS\"</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>re<span class=\"token operator\">==</span>h <span class=\"token operator\">&amp;&amp;</span> <span class=\"token assign-left variable\">ty</span><span class=\"token operator\">==</span><span class=\"token string\">\"DIS\"</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\tupdate_ips_state<span class=\"token punctuation\">(</span>ti<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>ty<span class=\"token operator\">==</span><span class=\"token string\">\"DIS\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t//1</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\tint <span class=\"token assign-left variable\">k</span><span class=\"token operator\">=</span>-1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\tforn1<span class=\"token punctuation\">(</span>i,n+1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\tif<span class=\"token punctuation\">(</span>ips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.zyz<span class=\"token operator\">==</span>se<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>k<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>k<span class=\"token operator\">==</span>-1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t\tforn1<span class=\"token punctuation\">(</span>i,n+1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t\t\tif<span class=\"token punctuation\">(</span>ips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.state <span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>k<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>k<span class=\"token operator\">==</span>-1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t\tforn1<span class=\"token punctuation\">(</span>i,n+1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t\t\tif<span class=\"token punctuation\">(</span>ips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.state <span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>k<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>k<span class=\"token operator\">==</span>-1<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\t\t//2</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t\t\tips<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>.state <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t\tips<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>.zyz <span class=\"token operator\">=</span> se<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t\t\t//3</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>gq<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ips<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>.gqsk <span class=\"token operator\">=</span> tdef+ti<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t\t\tint temp <span class=\"token operator\">=</span> gq - ti<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t\tif<span class=\"token punctuation\">(</span>temp<span class=\"token operator\">></span>tmax<span class=\"token punctuation\">)</span> temp <span class=\"token operator\">=</span> tmax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t\tif<span class=\"token punctuation\">(</span>temp<span class=\"token operator\">&lt;</span>tmin<span class=\"token punctuation\">)</span> temp <span class=\"token operator\">=</span> tmin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t\tips<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>.gqsk <span class=\"token operator\">=</span> ti+temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\t//4</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>h<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>se<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"OFR\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>k<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>ips<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>.gqsk<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>ty<span class=\"token operator\">==</span><span class=\"token string\">\"REQ\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t\t\t//1</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>re<span class=\"token operator\">!=</span>h<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t\t\t\tforn1<span class=\"token punctuation\">(</span>i,n+1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t\t\t\t\tif<span class=\"token punctuation\">(</span>ips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.zyz<span class=\"token operator\">==</span>se<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t\t\t\t\tif<span class=\"token punctuation\">(</span>ips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.state<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t\t\t\t\t\tips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.state<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t\t\t\t\t\tips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.zyz<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\t\t\t\t\tips<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.gqsk<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\t\t<span class=\"token builtin class-name\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t\t//2</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>ad<span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> ad<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>n <span class=\"token operator\">&amp;&amp;</span> ips<span class=\"token punctuation\">[</span>ad<span class=\"token punctuation\">]</span>.zyz<span class=\"token operator\">==</span>se<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>h<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>se<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"NAK\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>ad<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"0\"</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t\t\t<span class=\"token builtin class-name\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t\t//3</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t\tips<span class=\"token punctuation\">[</span>ad<span class=\"token punctuation\">]</span>.state <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t\t//4</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>gq<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ips<span class=\"token punctuation\">[</span>ad<span class=\"token punctuation\">]</span>.gqsk <span class=\"token operator\">=</span> tdef+ti<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t\tint temp <span class=\"token operator\">=</span> gq - ti<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\t\tif<span class=\"token punctuation\">(</span>temp<span class=\"token operator\">></span>tmax<span class=\"token punctuation\">)</span> temp <span class=\"token operator\">=</span> tmax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t\t\tif<span class=\"token punctuation\">(</span>temp<span class=\"token operator\">&lt;</span>tmin<span class=\"token punctuation\">)</span> temp <span class=\"token operator\">=</span> tmin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t\t\tips<span class=\"token punctuation\">[</span>ad<span class=\"token punctuation\">]</span>.gqsk <span class=\"token operator\">=</span> ti+temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t\t//5</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t\tcout<span class=\"token operator\">&lt;&lt;</span>h<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>se<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"ACK\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>ad<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token operator\">&lt;&lt;</span>ips<span class=\"token punctuation\">[</span>ad<span class=\"token punctuation\">]</span>.gqsk<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-3\"><a class=\"markdownIt-Anchor\" href=\"#分析-3\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>这题不难，但是题目巨长巨难读，而且题目对于ip地址的处理方面没有说清楚，需要看样例来理解</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>第三题的特点：都是大信息量的题目，然后模拟，首先就不要怕</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"4\"><a class=\"markdownIt-Anchor\" href=\"#4\">#</a> 4</h2>\n<h3 id=\"源码-4\"><a class=\"markdownIt-Anchor\" href=\"#源码-4\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;bits/stdc++.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>typedef long long  ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>const int mod <span class=\"token operator\">=</span> 1e9 + <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>//998244353<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>const int inf <span class=\"token operator\">=</span> 1e9 + <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>const ll INF <span class=\"token operator\">=</span> 1e18 + <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>const int N <span class=\"token operator\">=</span> <span class=\"token number\">1005</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>const int M <span class=\"token operator\">=</span> <span class=\"token number\">100005</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ll dp<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>int a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>bool s<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> v<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#define forn(i, n) for (int i = 0; i &lt; int(n); i++)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#define forn1(i, n) for (int i = 1; i &lt; int(n); i++)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>void <span class=\"token function-name function\">getcd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tforn1<span class=\"token punctuation\">(</span>i,M<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int j <span class=\"token operator\">=</span> i+i <span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>M <span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">j</span><span class=\"token operator\">+=</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tv<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>.push_back<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tstd::ios::sync_with_stdio<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    std::cin.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>std::cout.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    memset<span class=\"token punctuation\">(</span>dp,0,sizeof<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tgetcd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    int n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    cin<span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    forn<span class=\"token punctuation\">(</span>i,n<span class=\"token punctuation\">)</span> cin<span class=\"token operator\">>></span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    forn1<span class=\"token punctuation\">(</span>i,n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    \tmemset<span class=\"token punctuation\">(</span>s,0,sizeof<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    \tfor<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">j</span><span class=\"token operator\">=</span>i-1 <span class=\"token punctuation\">;</span> j<span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> j--<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    \t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    \t\tint d <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> - a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    \t\tint <span class=\"token assign-left variable\">cnt</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    \t\tfor<span class=\"token punctuation\">(</span>auto x: v<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    \t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    \t\t\tif<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>true<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    \t\t\ts<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    \t\t\tcnt++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\ts<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>*cnt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> %<span class=\"token operator\">=</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span>dp<span class=\"token punctuation\">[</span>n-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-4\"><a class=\"markdownIt-Anchor\" href=\"#分析-4\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>动态规划题，其实一般看到数据规模n最大1000左右这种的，就基本是动规了，</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>因为题解很暴力，但又不能完全跑暴力</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>关键在于去除重复计算，从最开始的一秒跑一百多个数据，到最后1000数据跑78ms</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>但是哪怕时间复杂度高，拿到30到60分是ok的</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>第四题的特点：算法</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"5\"><a class=\"markdownIt-Anchor\" href=\"#5\">#</a> 5</h2>\n<h3 id=\"源码-5\"><a class=\"markdownIt-Anchor\" href=\"#源码-5\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-5\"><a class=\"markdownIt-Anchor\" href=\"#分析-5\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>第五题的特点：图论</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/05/28/106div2/",
            "url": "https://fzglch.github.io/2021/05/28/106div2/",
            "title": "106div2",
            "date_published": "2021-05-28T08:59:47.000Z",
            "content_html": "<h2 id=\"a\"><a class=\"markdownIt-Anchor\" href=\"#a\">#</a> A</h2>\n<p>*800</p>\n<h3 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;cstdio></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include&lt;cmath></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tint t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tint n,k1,k2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tint w,b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tint wt,blk,mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\twhile<span class=\"token punctuation\">(</span>t--<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d %d %d\"</span>,<span class=\"token operator\">&amp;</span>n,<span class=\"token operator\">&amp;</span>k1,<span class=\"token operator\">&amp;</span>k2,<span class=\"token operator\">&amp;</span>w,<span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\twt <span class=\"token operator\">=</span> k<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>k2 ? k2 <span class=\"token builtin class-name\">:</span> k1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmid <span class=\"token operator\">=</span> abs<span class=\"token punctuation\">(</span>k1-k2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tblk <span class=\"token operator\">=</span> n - wt-mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>w<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>wt+mid/2 <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>blk+mid/2<span class=\"token punctuation\">)</span> printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"YES<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"NO<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>签到题</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"b\"><a class=\"markdownIt-Anchor\" href=\"#b\">#</a> B</h2>\n<p>*1000</p>\n<h3 id=\"源码-2\"><a class=\"markdownIt-Anchor\" href=\"#源码-2\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;iostream></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include&lt;cstring></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tint t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstring str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\twhile<span class=\"token punctuation\">(</span>t--<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tcin<span class=\"token operator\">>></span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tint <span class=\"token assign-left variable\">flag1</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>,flag0<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>str.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'1'</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t<span class=\"token assign-left variable\">flag1</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t<span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>str.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token assign-left variable\">flag0</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>flag1 <span class=\"token operator\">&amp;&amp;</span> flag0 <span class=\"token operator\">&amp;&amp;</span> flag1 <span class=\"token operator\">&lt;</span> flag0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"NO<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"YES<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-2\"><a class=\"markdownIt-Anchor\" href=\"#分析-2\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>签到题</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"c\"><a class=\"markdownIt-Anchor\" href=\"#c\">#</a> C</h2>\n<p>*1500，贪心</p>\n<h3 id=\"源码-3\"><a class=\"markdownIt-Anchor\" href=\"#源码-3\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;cstdio></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>long long a<span class=\"token punctuation\">[</span><span class=\"token number\">100008</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tint t,n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\twhile<span class=\"token punctuation\">(</span>t--<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tlong long <span class=\"token assign-left variable\">min1</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tlong long <span class=\"token assign-left variable\">min0</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tlong long <span class=\"token function\">sum</span> <span class=\"token operator\">=</span> n*<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tlong long minsum <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tlong long num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int k <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> n <span class=\"token punctuation\">;</span> k++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>k%2<span class=\"token punctuation\">)</span>//为奇数</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t//</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t//if<span class=\"token punctuation\">(</span>k<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"对于k==3,min1原为%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,min1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t//</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\tif<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token operator\">=</span>min1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token function\">sum</span> + a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> - min1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t\tnum <span class=\"token operator\">=</span> n-k/2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token function\">sum</span> + <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>-min1<span class=\"token punctuation\">)</span> * num <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t\tmin1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\tif<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token operator\">=</span>min0<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token function\">sum</span> + a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> - min0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t\tnum <span class=\"token operator\">=</span> n-k/2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\t\t<span class=\"token function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token function\">sum</span> +<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>-min0<span class=\"token punctuation\">)</span> * num  <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t\t\tmin0 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t//</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t//if<span class=\"token punctuation\">(</span>k<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"对于k=3,a[k]=%d,min1=%d,num=%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span>,min1,num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t//printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"对于 k = %d ,minsun = %d , sum = %d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,k,minsum,sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t//</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&lt;</span> minsum<span class=\"token punctuation\">)</span> minsum <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,minsum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-3\"><a class=\"markdownIt-Anchor\" href=\"#分析-3\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>因为t*n<span class=\"token operator\">=</span>1e8，所以关键在于一遍跑完，不要多次跑，动态的更新最小值和sum即可</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"d\"><a class=\"markdownIt-Anchor\" href=\"#d\">#</a> D</h2>\n<p>*2100，数学</p>\n<h3 id=\"源码-4\"><a class=\"markdownIt-Anchor\" href=\"#源码-4\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include &lt;cstdio></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;cmath></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include &lt;cstring></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>const int maxN <span class=\"token operator\">=</span> <span class=\"token number\">20000005</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bool a<span class=\"token punctuation\">[</span>maxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>int b<span class=\"token punctuation\">[</span>maxN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>void setPrimeFalse<span class=\"token punctuation\">(</span>int n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tmemset<span class=\"token punctuation\">(</span>a,0,sizeof<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span> i*i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>false<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tfor<span class=\"token punctuation\">(</span>int j <span class=\"token operator\">=</span> i <span class=\"token punctuation\">;</span> i*j<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> j++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\ta<span class=\"token punctuation\">[</span>i*j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>void getB<span class=\"token punctuation\">(</span>int n <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tmemset<span class=\"token punctuation\">(</span>b,0,sizeof<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>false<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tfor<span class=\"token punctuation\">(</span>int j <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i*j<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> j++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\tb<span class=\"token punctuation\">[</span>i*j<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tint t,c,d,x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tint k <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tint kind<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tint primeNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tsetPrimeFalse<span class=\"token punctuation\">(</span>maxN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tgetB<span class=\"token punctuation\">(</span>maxN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\twhile<span class=\"token punctuation\">(</span>t--<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %d\"</span>, <span class=\"token operator\">&amp;</span>c , <span class=\"token operator\">&amp;</span>d , <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tkind <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int g <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> g*g <span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span> x <span class=\"token punctuation\">;</span> g++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>x%g<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\tprimeNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\tk <span class=\"token operator\">=</span> x/g+d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\tif<span class=\"token punctuation\">(</span>k%c<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\t\tk/<span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t\t\tif<span class=\"token punctuation\">(</span>k<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> kind++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t\t\t\tprimeNum <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\t\t\t//</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t\t\t\t//printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"k=%d,\"</span>,k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t\t\t\t//printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"primeNum=%d,\"</span>,primeNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t\t\t\t//</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t\t\t\tkind <span class=\"token operator\">+=</span> pow <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>,primeNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>x%g<span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> g*g<span class=\"token operator\">!=</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\tprimeNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t\tk <span class=\"token operator\">=</span> g+d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\tif<span class=\"token punctuation\">(</span>k%c<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\t\tk/<span class=\"token operator\">=</span>c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t\t\tif<span class=\"token punctuation\">(</span>k<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> kind++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t\t\t\tprimeNum <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t\t\t\t//</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t\t\t\t\t//printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"k=%d,\"</span>,k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t\t\t\t\t//printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"primeNum=%d,\"</span>,primeNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t\t\t\t\t//</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\t\t\t\t\tkind <span class=\"token operator\">+=</span> pow <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>,primeNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,kind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-4\"><a class=\"markdownIt-Anchor\" href=\"#分析-4\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>分解问题</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>c*lcm<span class=\"token punctuation\">(</span>a,b<span class=\"token punctuation\">)</span> - d*gcd<span class=\"token punctuation\">(</span>a,b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>c*ABg - dg <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>//其中gcd<span class=\"token punctuation\">(</span>A,B<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>AB <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x/g + d<span class=\"token punctuation\">)</span>/c<span class=\"token punctuation\">;</span>//其中g<span class=\"token operator\">|</span>x；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>AB用k种质数组成，则答案为2^k^</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"e\"><a class=\"markdownIt-Anchor\" href=\"#e\">#</a> E</h2>\n<p>*2400</p>\n<h3 id=\"源码-5\"><a class=\"markdownIt-Anchor\" href=\"#源码-5\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-5\"><a class=\"markdownIt-Anchor\" href=\"#分析-5\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"f\"><a class=\"markdownIt-Anchor\" href=\"#f\">#</a> F</h2>\n<h3 id=\"源码-6\"><a class=\"markdownIt-Anchor\" href=\"#源码-6\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-6\"><a class=\"markdownIt-Anchor\" href=\"#分析-6\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/05/28/722div2/",
            "url": "https://fzglch.github.io/2021/05/28/722div2/",
            "title": "#722div2",
            "date_published": "2021-05-28T08:59:16.000Z",
            "content_html": "<h2 id=\"a\"><a class=\"markdownIt-Anchor\" href=\"#a\">#</a> A</h2>\n<p>*800</p>\n<h3 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;cstdio></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tint a<span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tint t,n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\twhile<span class=\"token punctuation\">(</span>t--<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tint min <span class=\"token operator\">=</span> <span class=\"token number\">101</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tint result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> min <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> min<span class=\"token punctuation\">)</span> result++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,n-result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>签到题</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"b\"><a class=\"markdownIt-Anchor\" href=\"#b\">#</a> B</h2>\n<p>*1100，数学，贪心</p>\n<h3 id=\"源码-2\"><a class=\"markdownIt-Anchor\" href=\"#源码-2\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;cstdio></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include&lt;algorithm></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tint t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tint a<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tint n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\twhile<span class=\"token punctuation\">(</span>t--<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tsort<span class=\"token punctuation\">(</span>a,a+n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"1<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token builtin class-name\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>n<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>-a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span><span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>,a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"2<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"1<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token builtin class-name\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\tint min <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>-a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>,zheng<span class=\"token operator\">=</span><span class=\"token number\">0</span>,pos<span class=\"token operator\">=</span>n-1,numofzheng<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\tint flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>flag <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\tif<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> zheng<span class=\"token punctuation\">)</span> numofzheng++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> if<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> flag <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\tzheng <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\tpos <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\tflag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>//找到最小正 </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> if<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-a<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min <span class=\"token operator\">&amp;&amp;</span> flag <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> min <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-a<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t zheng <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\tzheng <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>min <span class=\"token operator\">></span><span class=\"token operator\">=</span> zheng<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>min <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,pos+numofzheng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span>  printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,pos+1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>pos <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"1<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-2\"><a class=\"markdownIt-Anchor\" href=\"#分析-2\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"c\"><a class=\"markdownIt-Anchor\" href=\"#c\">#</a> C</h2>\n<h3 id=\"源码-3\"><a class=\"markdownIt-Anchor\" href=\"#源码-3\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-3\"><a class=\"markdownIt-Anchor\" href=\"#分析-3\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"d\"><a class=\"markdownIt-Anchor\" href=\"#d\">#</a> D</h2>\n<h3 id=\"源码-4\"><a class=\"markdownIt-Anchor\" href=\"#源码-4\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-4\"><a class=\"markdownIt-Anchor\" href=\"#分析-4\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"e\"><a class=\"markdownIt-Anchor\" href=\"#e\">#</a> E</h2>\n<h3 id=\"源码-5\"><a class=\"markdownIt-Anchor\" href=\"#源码-5\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-5\"><a class=\"markdownIt-Anchor\" href=\"#分析-5\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"f\"><a class=\"markdownIt-Anchor\" href=\"#f\">#</a> F</h2>\n<h3 id=\"源码-6\"><a class=\"markdownIt-Anchor\" href=\"#源码-6\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-6\"><a class=\"markdownIt-Anchor\" href=\"#分析-6\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/05/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%8E%E7%8A%B6%E5%8E%8B/",
            "url": "https://fzglch.github.io/2021/05/19/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B8%8E%E7%8A%B6%E5%8E%8B/",
            "title": "动态规划与状压",
            "date_published": "2021-05-19T04:03:10.000Z",
            "content_html": "<p>来了，DP 来了</p>\n<h2 id=\"从dp用来做什么出发\"><a class=\"markdownIt-Anchor\" href=\"#从dp用来做什么出发\">#</a> 从 DP 用来做什么出发</h2>\n<h3 id=\"目的\"><a class=\"markdownIt-Anchor\" href=\"#目的\">#</a> 目的</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>当求解某一个问题，其每个阶段都需要做出决策，这点上与分治有些像</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>但DP每个决策都不是独立的，其受之前的阶段英雄，同时也影响之后的决策</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"dp最关键的是什么\"><a class=\"markdownIt-Anchor\" href=\"#dp最关键的是什么\">#</a> DP 最关键的是什么</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>得到递推式（状态转移方程），每个阶段之间的递推</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>按照算法导论的说法，其两种方法一种是带记录的往回递归（避免重复计算子问题），一种是往前迭代</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"dp经典\"><a class=\"markdownIt-Anchor\" href=\"#dp经典\">#</a> DP 经典</h2>\n<h3 id=\"01背包\"><a class=\"markdownIt-Anchor\" href=\"#01背包\">#</a> 01 背包</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;iostream></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include&lt;cstring></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>const int maxn <span class=\"token operator\">=</span> <span class=\"token punctuation\">;</span>//物品数量 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tstd::ios::sync_with_stdio<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std::cin.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>std::cout.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    int n<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    int weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cin <span class=\"token operator\">>></span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    int w<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span>,v<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>//single weight <span class=\"token operator\">&amp;&amp;</span> value</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    int dp<span class=\"token punctuation\">[</span>maxn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    for<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>maxn <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    \tcin<span class=\"token operator\">>></span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    \tcin<span class=\"token operator\">>></span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tmemset<span class=\"token punctuation\">(</span>dp,0,sizeof<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>weight <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">j</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>maxn <span class=\"token punctuation\">;</span> j++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token operator\">=</span>w<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> , dp<span class=\"token punctuation\">[</span>i-w<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>+v<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> dp<span class=\"token punctuation\">[</span>weight<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>我们注意到一点，上段代码我们对物品的选择是可重复还是不可重复的呢？</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>显然是可重复的，那么如果要不可重复，我们需要记录每次dp的选择情况</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>最容易想到的，就是建一个bool数组，来记录每个物品是否已选</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>但对每个dp的每个选择情况都得建对应bool数组，显得有些麻烦</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>接着就想到，可以把bool数组看成二进制数，进而压缩为一个数来表示</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>而这就是状压</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>所以实际上对于需要记录选择的dp，不应该是一维的，需要另外表示选择</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>比如 dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> , dp<span class=\"token punctuation\">[</span>i-w<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>+v<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>需要改为 dp <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>s<span class=\"token operator\">|</span>new<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max <span class=\"token punctuation\">(</span> dp <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>s<span class=\"token operator\">|</span>new<span class=\"token punctuation\">]</span> , dp <span class=\"token punctuation\">[</span>i-w<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>+v<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>其中s表示选择集合，new表示本次新加入集合的选择</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"但这个问题可以不用状压\"><a class=\"markdownIt-Anchor\" href=\"#但这个问题可以不用状压\">#</a> 但这个问题可以不用状压</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>改写成：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>for<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>maxn <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    for<span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span> <span class=\"token operator\">=</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> v<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>weight <span class=\"token punctuation\">;</span> v++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> , dp<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v-w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>+c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>因为对每个物品只跑一遍所以不存在重复选择</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>最后利用滚动数组，简写成：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> , dp<span class=\"token punctuation\">[</span>v-w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>+c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"01背包问题换一种思路\"><a class=\"markdownIt-Anchor\" href=\"#01背包问题换一种思路\">#</a> 01 背包问题换一种思路</h2>\n<h3 id=\"简单搜索\"><a class=\"markdownIt-Anchor\" href=\"#简单搜索\">#</a> 简单搜索</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>其实01背包还能搜索来做，dfs、bfs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>大致示例：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>void dfs（int start）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    if（start<span class=\"token operator\">==</span>n）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        if（sum<span class=\"token operator\">></span><span class=\"token operator\">=</span>max） max <span class=\"token operator\">=</span> sum；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        return；</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tif<span class=\"token punctuation\">(</span>sum<span class=\"token operator\">></span>lim<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">sum</span> <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span>；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    dfs（start+1）；</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">sum</span> -<span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    dfs（start+1）；</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"https://fzglch.github.io/2021/04/05/DFS%E5%92%8CBFS/\">简单搜索</a></p>\n<h2 id=\"一个dp例题\"><a class=\"markdownIt-Anchor\" href=\"#一个dp例题\">#</a> 一个 dp 例题</h2>\n<p>这个是写题解读错题目后写出来的 dp，就放这里了</p>\n<h3 id=\"题意理解错后的\"><a class=\"markdownIt-Anchor\" href=\"#题意理解错后的\">#</a> 题意（理解错后的）</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>给出两个字符串，保证两个字符串的第一个字符不同</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>可以每次把其中一个字符串的头部摘出来放到第三个字符串（刚开始为空）的尾部</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>但是不能使得第三个字符串存在相邻的相同元素</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;bits/stdc++.h></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#define forn(i, n) for (int i = 0; i &lt; int(n); i++)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>typedef long long  ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>const int mod <span class=\"token operator\">=</span> <span class=\"token number\">998244353</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>const int inf <span class=\"token operator\">=</span> 1e9 + <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>const ll INF <span class=\"token operator\">=</span> 1e18 + <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>int dp<span class=\"token punctuation\">[</span><span class=\"token number\">1005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>int add<span class=\"token punctuation\">(</span>int a,int b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\ta <span class=\"token operator\">+=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tif<span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span><span class=\"token operator\">=</span>mod<span class=\"token punctuation\">)</span> a -<span class=\"token operator\">=</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tif<span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> a <span class=\"token operator\">+=</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tstd::ios::sync_with_stdio<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    std::cin.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>std::cout.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    string str1,str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cin<span class=\"token operator\">>></span>str<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>>></span>str2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    memset<span class=\"token punctuation\">(</span>dp,0,sizeof<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    forn<span class=\"token punctuation\">(</span>i,str1.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>+1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    \tforn<span class=\"token punctuation\">(</span>j,str2.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>+1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    \t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    \t\tif<span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>str2<span class=\"token punctuation\">[</span>j-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    \t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    \t\t\tdp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span> dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>,dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    \t\t\t</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    \t\tif<span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>str1<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    \t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    \t\t\tdp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span> dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>,dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    \t\t\t</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    \t\tif<span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>str2<span class=\"token punctuation\">[</span>j-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    \t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    \t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>,dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    \t\t\t</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    \t\tif<span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>str1<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    \t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    \t\t\tdp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> add<span class=\"token punctuation\">(</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>,dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    \t\t\t</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\tll ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\tforn<span class=\"token punctuation\">(</span>i,str1.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>+1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    \tforn<span class=\"token punctuation\">(</span>j,str2.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>+1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    \t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    \t\tans <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    \t\tans <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    \t\t</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"状压例题\"><a class=\"markdownIt-Anchor\" href=\"#状压例题\">#</a> 状压例题</h2>\n<p>看个新例题，这个很适合用状压</p>\n<h3 id=\"大致题目描述\"><a class=\"markdownIt-Anchor\" href=\"#大致题目描述\">#</a> 大致题目描述</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>给出一个包含n个正整数的数列，要求得到一个等长正整数数列</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>要求：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span>.得到数列要任何两项最大公约数为1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span>.其次对a~i~-b~i~的绝对值的累积和最小，并输出这个最小值</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>n<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span><span class=\"token number\">100</span>,ai<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span><span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dp的规模一般都小，因为复杂度普遍的高</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-2\"><a class=\"markdownIt-Anchor\" href=\"#分析-2\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>可以得出：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span>.每项都为1的数列满足要求1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>.结合上一条与ai<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span><span class=\"token number\">30</span>的条件，可以得出bi最大可能是59</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span>.联想到质数，因为由不同质数集合元素相乘组成的两个数，最大公约数才为1（状压登场）</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"源码-2\"><a class=\"markdownIt-Anchor\" href=\"#源码-2\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;iostream></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include&lt;cstring></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstd::ios::sync_with_stdio<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    std::cin.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>std::cout.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    int n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cin <span class=\"token operator\">>></span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    int a<span class=\"token punctuation\">[</span>n+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tint dp<span class=\"token punctuation\">[</span>n+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tmemset<span class=\"token punctuation\">(</span>dp,0,sizeof<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tint prime<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span>, <span class=\"token number\">3</span>, <span class=\"token number\">5</span>, <span class=\"token number\">7</span>, <span class=\"token number\">11</span>, <span class=\"token number\">13</span>, <span class=\"token number\">17</span>, <span class=\"token number\">19</span>, <span class=\"token number\">23</span>, <span class=\"token number\">29</span>, <span class=\"token number\">31</span>, <span class=\"token number\">37</span>, <span class=\"token number\">41</span>, <span class=\"token number\">43</span>, <span class=\"token number\">47</span>, <span class=\"token number\">53</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tint max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span> n <span class=\"token punctuation\">;</span> i ++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tcin<span class=\"token operator\">>></span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> max <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tint fact<span class=\"token punctuation\">[</span><span class=\"token number\">2</span>*max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tmemset<span class=\"token punctuation\">(</span>fact,0,sizeof<span class=\"token punctuation\">(</span>fact<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span>*max <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span><span class=\"token number\">16</span> <span class=\"token punctuation\">;</span> j++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>i%prime<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> fact<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span><span class=\"token operator\">=</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&lt;</span><span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span> n <span class=\"token punctuation\">;</span> i ++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    \t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int k <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span>*max <span class=\"token punctuation\">;</span> k ++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    \t\tint x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>~fact<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">((</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> - <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    \t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int s <span class=\"token operator\">=</span> x <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s - <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i - <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> + abs<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> - k<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s <span class=\"token operator\">|</span> fact<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s <span class=\"token operator\">|</span> fact<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s <span class=\"token operator\">|</span> fact<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> + abs<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    int min <span class=\"token operator\">=</span> <span class=\"token number\">999999999</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   for<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token number\">16</span>-1 <span class=\"token punctuation\">;</span> i<span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i--<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> min <span class=\"token operator\">></span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> min <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-3\"><a class=\"markdownIt-Anchor\" href=\"#分析-3\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>为何这个相比01背包的例子更适合用状压呢？</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>因为我们无法对每个数跑一遍，我们需要保证它们之间不冲突</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>如果暴力的跑并且每次和前面的所有数进行判断是否冲突</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>那么会多出很多运算，复杂度大幅提高</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"更进一步\"><a class=\"markdownIt-Anchor\" href=\"#更进一步\">#</a> 更进一步</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>上段代码，我们只输出了最佳数列对应的dp值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>假如要求输出得到的数列呢</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>很简单，我们只需要再弄一个状压数组把每个dp对应横纵坐标的选择记录即可</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"源码-3\"><a class=\"markdownIt-Anchor\" href=\"#源码-3\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>int  choice<span class=\"token punctuation\">[</span>n+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>每次更新dp时：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i - <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> + abs<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> - k<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s <span class=\"token operator\">|</span> fact<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s <span class=\"token operator\">|</span> fact<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s <span class=\"token operator\">|</span> fact<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> + abs<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    choice <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s <span class=\"token operator\">|</span> fact<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> choice<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>&lt;</span><span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"思考\"><a class=\"markdownIt-Anchor\" href=\"#思考\">#</a> 思考</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>这个问题其实一直到输出dp值都仍然可以用简单搜索做</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>但要求输出原数列，这就必须要记录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>所以dp状压做适合解决的问题，比起得到最佳决策值，更关键是需要记录决策过程</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"dp与贪心对比\"><a class=\"markdownIt-Anchor\" href=\"#dp与贪心对比\">#</a> DP 与贪心对比</h2>\n<h3 id=\"在决策的运算上\"><a class=\"markdownIt-Anchor\" href=\"#在决策的运算上\">#</a> 在决策的运算上</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>两者的一大共同点是求解过程需要多步决策</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>但贪心是每次只跑局部最优，dp是将每步可以的决策都跑</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>贪心决策的最终结果只有一个结果，dp的则是很多，在其中寻找要的结果</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>贪心在决策时只考虑局部最优，不顾及全局</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dp则是用状态转移方程</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>比如在01背包上，贪心是只选当前可选的，价值/重量 这个比例最高的物品</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dp则是利用对dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>n-w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> + v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>； </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//若选重量n的最优解选了第i件物品，那么在不选这个物品时，它是当前重量的最优解</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>总的来说：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t两者都需要每步决策，但贪心每次只跑一个局部最优不顾全局，只有一个结果且不一定正确</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tdp则合理的都跑，只要状态转移方程构建对了，过程操作没出错，那么一定能从众多结果中找到最佳解</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tdp的每次决策都很不独立，受之前的决策影响，并且一直影响着之后的决策</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t贪心的决策虽然彼此是各自的结果或则开始，但是是各顾各的跑自己的局部最优，其决策相对独立很多</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"在整个过程上\"><a class=\"markdownIt-Anchor\" href=\"#在整个过程上\">#</a> 在整个过程上</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>贪心由于只跑局部最优，往往十分简单，而dp则会相对复杂，但dp有完整的决策过程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>比如在刚刚这道题上：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t首先，如果跑贪心，只有一个结果，并且可能是不能每次都跑出正确答案的</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t其次，贪心如果想要尽量跑出正确答案，那么只能跑多次不重复的，这样复杂度会很高，并且可以说是不算贪心了</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"从本质来看\"><a class=\"markdownIt-Anchor\" href=\"#从本质来看\">#</a> 从本质来看</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>相比之下上述的都像是小细节，从整个大体上来看，dp最关键的在于它有多次决策，适用于解决需要尝试多种决策再从中找最优的问题</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>而贪心则适合一些比较简单的问题，因为贪心最大的缺点就是正确性得不到保证，简单问题贪心的正确与否很好判断</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>两者没有绝对的优劣，各自有自己更适合的问题，但是贪心能解决的问题dp一定能够解决，其代价则是多次决策的复杂度的提高</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>总的来说：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t算法的选择，只考虑适合不适合对应问题，具体问题具体分析，首先是正确性，其次是复杂度</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t而对于dp和贪心来说，贪心复杂度低不少，但dp更能保证正确性</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t相比其他任何算法，要保证正确性都是不选择贪心的决定性因素，dp和贪心比也是这样</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t之所以选dp，其实就是相比贪心，dp保证得到正确解，其实就这一点，决定了使用dp而非贪心</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t也就是说，之前提到的区别，dp什么相对决策不独立，使用的决策是依靠状态转移方程等等，在解决问题时是不值一提的</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t因为这两种算法，不能用贪心解决的就只能dp，能贪心的，也不要去使用复杂度高上不少的dp。</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/05/16/Top-K/",
            "url": "https://fzglch.github.io/2021/05/16/Top-K/",
            "title": "Top K",
            "date_published": "2021-05-16T08:29:08.000Z",
            "content_html": "<p>Top K 问题，求 n 个数中最大的 K 个数，如求 10 亿个数中的前 100 大的数</p>\n<h2 id=\"遍历k次\"><a class=\"markdownIt-Anchor\" href=\"#遍历k次\">#</a> 遍历 K 次</h2>\n<h3 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>for<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>int j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n <span class=\"token punctuation\">;</span> j++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t遍历找值并记录；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t删除此最大值； </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>很显然两个循环嵌套，复杂度n*k</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>暴力求解，是最差的一个思路</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"全排序\"><a class=\"markdownIt-Anchor\" href=\"#全排序\">#</a> 全排序</h2>\n<h3 id=\"源码-2\"><a class=\"markdownIt-Anchor\" href=\"#源码-2\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sort<span class=\"token punctuation\">(</span>a,a+n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-2\"><a class=\"markdownIt-Anchor\" href=\"#分析-2\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>全排列至有序，nlogn</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"结合最小堆\"><a class=\"markdownIt-Anchor\" href=\"#结合最小堆\">#</a> 结合最小堆</h2>\n<h3 id=\"源码-3\"><a class=\"markdownIt-Anchor\" href=\"#源码-3\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>multiset<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span>st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>for<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tst.insert<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span>::iterator <span class=\"token assign-left variable\">it</span><span class=\"token operator\">=</span>st.begin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>for<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> k <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tint min <span class=\"token operator\">=</span> *it</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tif<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>min<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tst.earse<span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tst.insert<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-3\"><a class=\"markdownIt-Anchor\" href=\"#分析-3\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>跑一个n，每次若插入删除则是logk，复杂度nlogk</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"分治\"><a class=\"markdownIt-Anchor\" href=\"#分治\">#</a> 分治</h2>\n<h3 id=\"源码-4\"><a class=\"markdownIt-Anchor\" href=\"#源码-4\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>for<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token punctuation\">;</span> <span class=\"token assign-left variable\">i</span><span class=\"token operator\">+=</span>n/1000<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tsort<span class=\"token punctuation\">(</span>a+i,a+i+1000<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t得到前k个放入b； </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sort<span class=\"token punctuation\">(</span>b,b+k*1000<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-4\"><a class=\"markdownIt-Anchor\" href=\"#分析-4\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>for中是nlog1000，for外的sort是k*1000log<span class=\"token punctuation\">(</span>1000k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>时间复杂度基本和nlogn相当，但空间复杂度降下来了</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>思路是比如求全校前十，先把全班前十全找出来</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>因为全校前十必是本班前十，然后合起来再找</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"快选\"><a class=\"markdownIt-Anchor\" href=\"#快选\">#</a> 快选</h2>\n<h3 id=\"源码-5\"><a class=\"markdownIt-Anchor\" href=\"#源码-5\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>随机选pivot</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>将其移至最尾</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>定义两个指针ij</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>for<span class=\"token punctuation\">(</span>i从0至n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tif<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>pivot<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\ti++<span class=\"token punctuation\">;</span>j++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">else</span> j++<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>得到pivot对应的top pivot；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>往左或右进行下一次；</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-5\"><a class=\"markdownIt-Anchor\" href=\"#分析-5\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>复杂度n,是top k问题平均复杂度最好的一个算法，虽然最差是n方</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>相出这个算法的和sort快排算法的，是同一个人</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/05/15/hnu15th/",
            "url": "https://fzglch.github.io/2021/05/15/hnu15th/",
            "title": "hnu15th",
            "date_published": "2021-05-15T10:53:02.000Z",
            "content_html": "<p>个人题解</p>\n<h2 id=\"a\"><a class=\"markdownIt-Anchor\" href=\"#a\">#</a> A</h2>\n<h3 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;iostream></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include&lt;cstring></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>int dp<span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">20350</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstd::ios::sync_with_stdio<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    std::cin.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>std::cout.tie<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    int t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    int a<span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">]</span>,b<span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>//两种甜甜圈</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tint c<span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">]</span> ,d<span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>//谁先到以及其选择 </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tcin<span class=\"token operator\">>></span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tint <span class=\"token assign-left variable\">total</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>t <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tcin<span class=\"token operator\">>></span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">>></span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\ttotal <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\ttotal <span class=\"token operator\">+=</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>t <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tcin<span class=\"token operator\">>></span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cin<span class=\"token operator\">>></span>d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tmemset<span class=\"token punctuation\">(</span>dp,-1,sizeof<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tdp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>t <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span><span class=\"token number\">20200</span> <span class=\"token punctuation\">;</span> j++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>-1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\tif<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t\tif<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t\t\tmax<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>+b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>,dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>+b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t\t\tif<span class=\"token punctuation\">(</span>j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>+b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>+b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span><span class=\"token number\">20200</span><span class=\"token punctuation\">)</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>+b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>+b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>,dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>+b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t\t\tif<span class=\"token punctuation\">(</span>j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span><span class=\"token number\">20200</span><span class=\"token punctuation\">)</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>,dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t\t <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t\t\tif<span class=\"token punctuation\">(</span>j+a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j+a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span><span class=\"token number\">20200</span><span class=\"token punctuation\">)</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j+a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j+a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>,dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>+a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t\t\tif<span class=\"token punctuation\">(</span>j-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span><span class=\"token number\">20200</span><span class=\"token punctuation\">)</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>,dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t\t\tif<span class=\"token punctuation\">(</span>j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>+b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>+b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span><span class=\"token number\">20200</span><span class=\"token punctuation\">)</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>+b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>+b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>,dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>+b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t\t\tif<span class=\"token punctuation\">(</span>j+a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j+a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span><span class=\"token number\">20200</span><span class=\"token punctuation\">)</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j+a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j+a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>,dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>+a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\t\tif<span class=\"token punctuation\">(</span>j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span><span class=\"token number\">20200</span><span class=\"token punctuation\">)</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j-a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>,dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>//\tint <span class=\"token assign-left variable\">nearest</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>//\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span><span class=\"token number\">10100</span> <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>//\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>//\t\tif<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>nearest <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>//\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>//\tint result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>//\t</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>//\tresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>total + nearest - <span class=\"token number\">10100</span><span class=\"token punctuation\">)</span>/2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tint <span class=\"token assign-left variable\">result</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span><span class=\"token number\">10100</span> <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t<span class=\"token assign-left variable\">result</span><span class=\"token operator\">=</span>max<span class=\"token punctuation\">(</span>result,dp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\tcout <span class=\"token operator\">&lt;&lt;</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dp</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"b\"><a class=\"markdownIt-Anchor\" href=\"#b\">#</a> B</h2>\n<p>数学题</p>\n<h3 id=\"源码-2\"><a class=\"markdownIt-Anchor\" href=\"#源码-2\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include &lt;iostream></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;cstring></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>typedef long long ll<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ll n, r, p, a, b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ll cimo<span class=\"token punctuation\">(</span>ll di, ll ci, ll mo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ll ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span>, base <span class=\"token operator\">=</span> di<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    while<span class=\"token punctuation\">(</span>ci<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        if<span class=\"token punctuation\">(</span>ci <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            ans *<span class=\"token operator\">=</span> base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            ans %<span class=\"token operator\">=</span> mo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        base *<span class=\"token operator\">=</span> base<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        base %<span class=\"token operator\">=</span> mo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        ci <span class=\"token operator\">>></span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> r <span class=\"token operator\">>></span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    ll ans<span class=\"token punctuation\">[</span>n + <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ans<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    for<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        a <span class=\"token operator\">=</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>ans[i <span class=\"token operator\">-</span> <span class=\"token number\">1</span>] <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> r <span class=\"token operator\">+</span> ans[i <span class=\"token operator\">-</span> <span class=\"token number\">1</span>]<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        ans[i] <span class=\"token operator\">=</span> <span class=\"token punctuation\">((</span>a <span class=\"token operator\">%</span> p<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>cimo<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> p <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">)</span> % p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> ans<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-2\"><a class=\"markdownIt-Anchor\" href=\"#分析-2\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>这题退一下递推公式就好了，然后就是求模，注意p是质数可以用小费马，然后注意分数取模就好</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"c\"><a class=\"markdownIt-Anchor\" href=\"#c\">#</a> C</h2>\n<h3 id=\"源码-3\"><a class=\"markdownIt-Anchor\" href=\"#源码-3\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;cstdio></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include&lt;string.h></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tint bit<span class=\"token punctuation\">[</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tint t,x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tint index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\twhile<span class=\"token punctuation\">(</span>t--<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tint flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>//为负 </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tmemset<span class=\"token punctuation\">(</span>bit,0,sizeof<span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tindex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\twhile<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\tbit<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x%2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tx/<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tindex++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">32</span> <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\tif<span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span> bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\tindex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\twhile<span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\tbit<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\tindex++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\tbit<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tint result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">32</span> <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> result++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>,result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-3\"><a class=\"markdownIt-Anchor\" href=\"#分析-3\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>计算补码</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"d\"><a class=\"markdownIt-Anchor\" href=\"#d\">#</a> D</h2>\n<p>二分</p>\n<h3 id=\"源码-4\"><a class=\"markdownIt-Anchor\" href=\"#源码-4\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;iostream></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include&lt;algorithm></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>const int <span class=\"token assign-left variable\">N</span><span class=\"token operator\">=</span><span class=\"token number\">100000</span>+10<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>const int <span class=\"token assign-left variable\">M</span><span class=\"token operator\">=</span><span class=\"token number\">100000</span>+10<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>int t,n,m,k,p,l,r,q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>int ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>int a<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    while<span class=\"token punctuation\">(</span>~scanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">))</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        for<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>i++<span class=\"token punctuation\">)</span>scanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        for<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>i++<span class=\"token punctuation\">)</span>scanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        scanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        for<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span>i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            scanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d%d%d\"</span>,<span class=\"token operator\">&amp;</span>p,<span class=\"token operator\">&amp;</span>q,<span class=\"token operator\">&amp;</span>t,<span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            a<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token assign-left variable\">l</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">r</span><span class=\"token operator\">=</span>k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            while<span class=\"token punctuation\">(</span>l<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                int <span class=\"token assign-left variable\">mid</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>l+r<span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                int <span class=\"token assign-left variable\">temp</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>upper_bound<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>+1,a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>+n+1,a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>-a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>-1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                if<span class=\"token punctuation\">(</span>mid+temp<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token assign-left variable\">ans</span><span class=\"token operator\">=</span>mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token assign-left variable\">l</span><span class=\"token operator\">=</span>mid+1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>else</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token assign-left variable\">r</span><span class=\"token operator\">=</span>mid-1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span>max<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ans<span class=\"token punctuation\">]</span>,a<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k-ans<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-4\"><a class=\"markdownIt-Anchor\" href=\"#分析-4\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>暴力遍历n*m会超时，可以建立索引，也可以二分</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>但弄索引，更新的时候会显得比较麻烦</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"e\"><a class=\"markdownIt-Anchor\" href=\"#e\">#</a> E</h2>\n<h3 id=\"源码-5\"><a class=\"markdownIt-Anchor\" href=\"#源码-5\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-5\"><a class=\"markdownIt-Anchor\" href=\"#分析-5\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"f\"><a class=\"markdownIt-Anchor\" href=\"#f\">#</a> F</h2>\n<p>STL</p>\n<h3 id=\"源码-6\"><a class=\"markdownIt-Anchor\" href=\"#源码-6\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;cstdio></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include&lt;set></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tset<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tint t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tint k,x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\twhile<span class=\"token punctuation\">(</span>t--<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span>,<span class=\"token operator\">&amp;</span>k,<span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>k<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> st.insert<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>st.find<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>st.end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"no<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"yes<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-6\"><a class=\"markdownIt-Anchor\" href=\"#分析-6\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>一眼看过去是最简单的一道题，但是直接bool一个10的9次方数组会内存超限</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>可以用BST，也可以用set</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"g\"><a class=\"markdownIt-Anchor\" href=\"#g\">#</a> G</h2>\n<h3 id=\"源码-7\"><a class=\"markdownIt-Anchor\" href=\"#源码-7\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;iostream></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include&lt;string></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tint l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstring str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tcin<span class=\"token operator\">>></span>l<span class=\"token operator\">>></span>str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tint flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tif<span class=\"token punctuation\">(</span>str.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>-2 <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>i+1<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>i+2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tif<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>str.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>-2<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> str<span class=\"token punctuation\">[</span>str.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>-1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tif<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">else</span> cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"NO\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-7\"><a class=\"markdownIt-Anchor\" href=\"#分析-7\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>从数据量来看，凡是有找子串的操作，都会超时</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"h\"><a class=\"markdownIt-Anchor\" href=\"#h\">#</a> H</h2>\n<h3 id=\"源码-8\"><a class=\"markdownIt-Anchor\" href=\"#源码-8\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-8\"><a class=\"markdownIt-Anchor\" href=\"#分析-8\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"i\"><a class=\"markdownIt-Anchor\" href=\"#i\">#</a> I</h2>\n<h3 id=\"源码-9\"><a class=\"markdownIt-Anchor\" href=\"#源码-9\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;cstdio></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include&lt;cstring></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>int a<span class=\"token punctuation\">[</span><span class=\"token number\">200005</span><span class=\"token punctuation\">]</span>,yu<span class=\"token punctuation\">[</span><span class=\"token number\">200005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>long long sum<span class=\"token punctuation\">[</span><span class=\"token number\">200005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>int le<span class=\"token punctuation\">[</span><span class=\"token number\">200005</span><span class=\"token punctuation\">]</span>,ri<span class=\"token punctuation\">[</span><span class=\"token number\">200005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tint n,m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tmemset<span class=\"token punctuation\">(</span>le,-1,sizeof<span class=\"token punctuation\">(</span>le<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>memset<span class=\"token punctuation\">(</span>ri,-1,sizeof<span class=\"token punctuation\">(</span>ri<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span>,<span class=\"token operator\">&amp;</span>n,<span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>n <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>,<span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tsum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tyu<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tle<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>ri<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>n <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tsum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i-1<span class=\"token punctuation\">]</span> + a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tyu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> % m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>le<span class=\"token punctuation\">[</span>yu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>-1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\tle<span class=\"token punctuation\">[</span>yu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>ri<span class=\"token punctuation\">[</span>yu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> ri<span class=\"token punctuation\">[</span>yu<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tlong long maxb <span class=\"token operator\">=</span> <span class=\"token number\">0</span>,maxm <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>ri<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-le<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> maxb<span class=\"token punctuation\">)</span> maxb <span class=\"token operator\">=</span> ri<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-le<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tif<span class=\"token punctuation\">(</span>le<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>-1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span>ri<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> - sum<span class=\"token punctuation\">[</span>le<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> maxm<span class=\"token punctuation\">)</span> maxm <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>ri<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> - sum<span class=\"token punctuation\">[</span>le<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld %lld\"</span>,maxm,maxb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-9\"><a class=\"markdownIt-Anchor\" href=\"#分析-9\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>一看到需要反复得到区间和，是不是就想到了线段树</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>但我们这次不用线段树，因为我们不update，只query</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>开两个数组，一个前n项和，一个前n项和取余，不加每次重新求和是n方</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>开两个数组，记录同余位置，如果不开这两个，最后一个for中还得再加一个for来遍历寻找</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>那样复杂度也会从n变成n方，所以这四个数组是很有必要的</pre></td></tr></table></figure><p>More info: <a href=\"https://fzglch.github.io/2021/03/03/%E7%BA%BF%E6%AE%B5%E6%A0%91/\">线段树</a></p>\n<h2 id=\"j\"><a class=\"markdownIt-Anchor\" href=\"#j\">#</a> J</h2>\n<h3 id=\"源码-10\"><a class=\"markdownIt-Anchor\" href=\"#源码-10\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-10\"><a class=\"markdownIt-Anchor\" href=\"#分析-10\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"k\"><a class=\"markdownIt-Anchor\" href=\"#k\">#</a> K</h2>\n<h3 id=\"源码-11\"><a class=\"markdownIt-Anchor\" href=\"#源码-11\">#</a> 源码</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-11\"><a class=\"markdownIt-Anchor\" href=\"#分析-11\">#</a> 分析</h3>\n<pre><code class=\"language-bash\">\n</code></pre>\n<p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/05/11/%E5%9B%BE%E5%AE%9E%E9%AA%8C/",
            "url": "https://fzglch.github.io/2021/05/11/%E5%9B%BE%E5%AE%9E%E9%AA%8C/",
            "title": "图实验",
            "date_published": "2021-05-11T02:39:25.000Z",
            "content_html": "<p>这篇文章主要是讲的图的一个实验，用邻接表、邻接矩阵实现，操作带有 DFS\\BFS、最短路径、最小生成树</p>\n<h2 id=\"图的声明\"><a class=\"markdownIt-Anchor\" href=\"#图的声明\">#</a> 图的声明</h2>\n<h3 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//图的声明，后续两种实现，邻接矩阵，邻接表，不同结构需要的函数实现不同</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// From the software distribution accompanying the textbook</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// <span class=\"token string\">\"A Practical Introduction to Data Structures and Algorithm Analysis,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// Third Edition (C++)\"</span> by Clifford A. Shaffer.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>// Source code Copyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token number\">2007</span>-2011 by Clifford A. Shaffer.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// Graph abstract class. This ADT assumes that the number</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>// of vertices is fixed when the graph is created.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#ifndef GRAPH</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#define GRAPH</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>class Graph <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>private:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  void operator <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>const Graph<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>     // Protect assignment</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  Graph<span class=\"token punctuation\">(</span>const Graph<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>         // Protect copy constructor</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>public:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function-name function\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>          // Default constructor</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  virtual ~<span class=\"token function-name function\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> // Base destructor</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  // Initialize a graph of n vertices</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  virtual void Init<span class=\"token punctuation\">(</span>int n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  // Return: the number of vertices and edges</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  virtual int n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>//顶点数</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  virtual int e<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>//边数</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  // Return <span class=\"token function\">v</span><span class=\"token string\">'s first neighbor</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  virtual int first(int v) =0;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> // Return v'</span>s next neighbor</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  virtual int next<span class=\"token punctuation\">(</span>int v, int w<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  // Set the weight <span class=\"token keyword\">for</span> an edge</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  // i, j: The vertices</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  // wgt: Edge weight</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  virtual void setEdge<span class=\"token punctuation\">(</span>int v1, int v2, int wght<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  // Delete an edge</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  // i, j: The vertices</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  virtual void delEdge<span class=\"token punctuation\">(</span>int v1, int v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  // Determine <span class=\"token keyword\">if</span> an edge is <span class=\"token keyword\">in</span> the graph</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  // i, j: The vertices</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  // Return: <span class=\"token boolean\">true</span> <span class=\"token keyword\">if</span> edge i,j has non-zero weight</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  virtual bool isEdge<span class=\"token punctuation\">(</span>int i, int j<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  // Return an edge's weight</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  // i, j: The vertices</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  // Return: The weight of edge i,j, or zero</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  virtual int weight<span class=\"token punctuation\">(</span>int v1, int v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  // Get and Set the mark value <span class=\"token keyword\">for</span> a vertex</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  // v: The vertex</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  // val: The value to <span class=\"token builtin class-name\">set</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  virtual int getMark<span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  virtual void setMark<span class=\"token punctuation\">(</span>int v, int val<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>//用于表示是否已访问</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  virtual int getInDegree<span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  virtual int getOutDegree<span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">#endif // GRAPH</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h  </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>声明了需要的函数，具体的实现和声明分离，后续邻接表和邻接矩阵的实现各不相同</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"邻接矩阵的实现\"><a class=\"markdownIt-Anchor\" href=\"#邻接矩阵的实现\">#</a> 邻接矩阵的实现</h2>\n<h3 id=\"源码-2\"><a class=\"markdownIt-Anchor\" href=\"#源码-2\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h  </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// From the software distribution accompanying the textbook</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// <span class=\"token string\">\"A Practical Introduction to Data Structures and Algorithm Analysis,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// Third Edition (C++)\"</span> by Clifford A. Shaffer.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// Source code Copyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token number\">2007</span>-2011 by Clifford A. Shaffer.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// Include this <span class=\"token function\">file</span> to access Graph representation implemented using an</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// Adjacency Matrix.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#ifndef GRMATH</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#define GRMATH</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#include &lt;stdio.h></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#include &lt;ctype.h></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#include &lt;assert.h></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>// Used by the mark array</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#define UNVISITED 0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#define VISITED 1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#include \"graph.h\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>// Implementation <span class=\"token keyword\">for</span> the adjacency matrix representation</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>class Graphm <span class=\"token builtin class-name\">:</span> public Graph</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>private:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    int numVertex, numEdge<span class=\"token punctuation\">;</span> // Store number of vertices, edges</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    int **matrix<span class=\"token punctuation\">;</span>           // Pointer to adjacency matrix</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    int *mark<span class=\"token punctuation\">;</span>              // Pointer to mark array</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>public:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    Graphm<span class=\"token punctuation\">(</span>int numVert<span class=\"token punctuation\">)</span>     // Constructor</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        Init<span class=\"token punctuation\">(</span>numVert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    ~Graphm<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>         // Destructor</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mark<span class=\"token punctuation\">;</span> // Return dynamically allocated memory</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    void Init<span class=\"token punctuation\">(</span>int n<span class=\"token punctuation\">)</span>   // Initialize the graph</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        int i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        numVertex <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        numEdge <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        mark <span class=\"token operator\">=</span> new int<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>     // Initialize mark array</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            mark<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UNVISITED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        matrix <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int**<span class=\"token punctuation\">)</span> new int*<span class=\"token punctuation\">[</span>numVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> // Make matrix</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new int<span class=\"token punctuation\">[</span>numVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> // Initialize to <span class=\"token number\">0</span> weights</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> j++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    int <span class=\"token function-name function\">n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> numVertex<span class=\"token punctuation\">;</span>    // Number of vertices</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    int <span class=\"token function-name function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> numEdge<span class=\"token punctuation\">;</span>    // Number of edges</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    // Return first neighbor of <span class=\"token string\">\"v\"</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    int first<span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> numVertex<span class=\"token punctuation\">;</span>           // Return n <span class=\"token keyword\">if</span> none</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    // Return v's next neighbor after w</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    int next<span class=\"token punctuation\">(</span>int v, int w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        for<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> w + <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token builtin class-name\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> numVertex<span class=\"token punctuation\">;</span>           // Return n <span class=\"token keyword\">if</span> none</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    // Set edge <span class=\"token punctuation\">(</span>v1, v2<span class=\"token punctuation\">)</span> to <span class=\"token string\">\"wt\"</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    void setEdge<span class=\"token punctuation\">(</span>int v1, int v2, int wt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>//   Assert<span class=\"token punctuation\">(</span>wt<span class=\"token operator\">></span><span class=\"token number\">0</span>, <span class=\"token string\">\"Illegal weight value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        assert<span class=\"token punctuation\">(</span>wt <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> numEdge++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        matrix<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> wt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    void delEdge<span class=\"token punctuation\">(</span>int v1, int v2<span class=\"token punctuation\">)</span>   // Delete edge <span class=\"token punctuation\">(</span>v1, v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> numEdge--<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        matrix<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    bool isEdge<span class=\"token punctuation\">(</span>int i, int j<span class=\"token punctuation\">)</span> // Is <span class=\"token punctuation\">(</span>i, j<span class=\"token punctuation\">)</span> an edge?</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    int weight<span class=\"token punctuation\">(</span>int v1, int v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> matrix<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    int getMark<span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> mark<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    void setMark<span class=\"token punctuation\">(</span>int v, int val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        mark<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    int getInDegree<span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span>   // 求顶点v的入度</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        int result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        //<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>. 在此行以下插入补充代码</pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> result++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        //<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>. 在此行以上插入补充代码</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    int getOutDegree<span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span>    // 求顶点v的出度</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        int result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        //<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>. 在此行以下插入补充代码</pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> result++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        //<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>. 在此行以上插入补充代码</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token comment\"># endif // GRMATH</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-2\"><a class=\"markdownIt-Anchor\" href=\"#分析-2\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>邻接矩阵的实现相对简单，有向无向有区别</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"邻接表的实现\"><a class=\"markdownIt-Anchor\" href=\"#邻接表的实现\">#</a> 邻接表的实现</h2>\n<h3 id=\"结点类\"><a class=\"markdownIt-Anchor\" href=\"#结点类\">#</a> 结点类</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//结点类，包含两个属性，自身的值和下一个结点的地址</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include &lt;iostream> </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>template <span class=\"token operator\">&lt;</span>typename E<span class=\"token operator\">></span> class Link <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>public:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  E element<span class=\"token punctuation\">;</span>      // 结点值 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Link *next<span class=\"token punctuation\">;</span>        // 结点指针：在链表中指向下一结点</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  // 构造函数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Link<span class=\"token punctuation\">(</span>const E<span class=\"token operator\">&amp;</span> elemval, Link* nextval <span class=\"token operator\">=</span>NULL<span class=\"token punctuation\">)</span>//带值构造，element是模板，可以是结构体</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> element <span class=\"token operator\">=</span> elemval<span class=\"token punctuation\">;</span>  next <span class=\"token operator\">=</span> nextval<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>//比如grlist.h中element是自定义的Edge类</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  Link<span class=\"token punctuation\">(</span>Link* nextval <span class=\"token operator\">=</span>NULL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> next <span class=\"token operator\">=</span> nextval<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-3\"><a class=\"markdownIt-Anchor\" href=\"#分析-3\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对于结点，也单独做类，面向对象的思想</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"链表声明\"><a class=\"markdownIt-Anchor\" href=\"#链表声明\">#</a> 链表声明</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//链表的声明，用于后续邻接表</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#ifndef LIST</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#define LIST</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>template <span class=\"token operator\">&lt;</span>typename E<span class=\"token operator\">></span> class List <span class=\"token punctuation\">&#123;</span> // List ADT</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>private:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  void operator <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>const List<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>      // Protect assignment   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  List<span class=\"token punctuation\">(</span>const List<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>           // Protect copy constructor </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>public:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function-name function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>          // 默认构造函数 </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  virtual ~<span class=\"token function-name function\">List</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> // 基本的析构函数 </pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  // 从列表中清除内容,让它空着</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  virtual void clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  // 在当前位置插入一个元素</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  // item: 要插入的元素</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  virtual void insert<span class=\"token punctuation\">(</span>const E<span class=\"token operator\">&amp;</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  // 在列表的最后添加一个元素 </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  // item: 要添加的元素 </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  virtual void append<span class=\"token punctuation\">(</span>const E<span class=\"token operator\">&amp;</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  // 删除和返回当前元素 </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  // Return: 要删除的元素 </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  virtual E remove<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  // 将当前位置设置为列表的开始</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  virtual void moveToStart<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  // 将当前位置设置为列表的末尾 </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  virtual void moveToEnd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  // 将当前位置左移一步，如果当前位置在首位就不变 </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  virtual void prev<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  // 将当前位置右移一步，如果当前位置在末尾就不变 </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  virtual void next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  // 返回列表当前元素个数 </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  virtual int length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> const <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  // 返回当前位置 </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  virtual int currPos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> const <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  // 设置当前位置 </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  // pos: 要设置的当前位置 </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  virtual void moveToPos<span class=\"token punctuation\">(</span>int pos<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  // Return: 当前位置的元素 </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  virtual const E<span class=\"token operator\">&amp;</span> getValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> const <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">#endif</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-4\"><a class=\"markdownIt-Anchor\" href=\"#分析-4\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>声明需要的函数</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"链表实现\"><a class=\"markdownIt-Anchor\" href=\"#链表实现\">#</a> 链表实现</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//链表的实现</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include \"list.h\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#include&lt;assert.h></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>// This is the declaration <span class=\"token keyword\">for</span> LList. It is <span class=\"token function\">split</span> into two parts</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// because it is too big to fit on one book page</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// Linked list implementation</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>template <span class=\"token operator\">&lt;</span>typename E<span class=\"token operator\">></span> class LList: public List<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>private:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  Link<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span>* <span class=\"token function\">head</span><span class=\"token punctuation\">;</span>       // 指向链表头结点 </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  Link<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span>* <span class=\"token function\">tail</span><span class=\"token punctuation\">;</span>       // 指向链表最后一个结点 </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  Link<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span>* curr<span class=\"token punctuation\">;</span>       // 指向当前元素 </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  int cnt<span class=\"token punctuation\">;</span>    \t       // 当前列表大小 </pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  void <span class=\"token function-name function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        // 初始化</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    curr <span class=\"token operator\">=</span> <span class=\"token function\">tail</span> <span class=\"token operator\">=</span> <span class=\"token function\">head</span> <span class=\"token operator\">=</span> new Link<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  void <span class=\"token function-name function\">removeall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   // Return <span class=\"token function\">link</span> nodes to <span class=\"token function\">free</span> store </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    while<span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> NULL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      curr <span class=\"token operator\">=</span> <span class=\"token function\">head</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function\">head</span> <span class=\"token operator\">=</span> head-<span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      delete curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>public:</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  LList<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">size</span><span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> init<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>    // 构造函数 </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  ~<span class=\"token function-name function\">LList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> removeall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>                   // 析构函数</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  void print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> const<span class=\"token punctuation\">;</span>                // 打印列表内容</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  void <span class=\"token function-name function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> removeall<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> init<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>       // 清空列表</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  // 在当前位置插入“it”</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  void insert<span class=\"token punctuation\">(</span>const E<span class=\"token operator\">&amp;</span> it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    curr-<span class=\"token operator\">></span>next <span class=\"token operator\">=</span> new Link<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>it, curr-<span class=\"token operator\">></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail <span class=\"token operator\">==</span> curr<span class=\"token punctuation\">)</span> <span class=\"token function\">tail</span> <span class=\"token operator\">=</span> curr-<span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>  //新的尾指针 </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    cnt++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  void append<span class=\"token punctuation\">(</span>const E<span class=\"token operator\">&amp;</span> it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> // 追加“it”到列表中</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">tail</span> <span class=\"token operator\">=</span> tail-<span class=\"token operator\">></span>next <span class=\"token operator\">=</span> new Link<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>it, NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    cnt++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  // 删除并返回当前元素</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  E <span class=\"token function-name function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    assert<span class=\"token punctuation\">(</span>curr-<span class=\"token operator\">></span>next <span class=\"token operator\">!=</span> NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//<span class=\"token string\">\"No element\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    E it <span class=\"token operator\">=</span> curr-<span class=\"token operator\">></span>next-<span class=\"token operator\">></span>element<span class=\"token punctuation\">;</span>      // 保存元素值</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    Link<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span>* ltemp <span class=\"token operator\">=</span> curr-<span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>     // 保存指针域信息 </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tail <span class=\"token operator\">==</span> curr-<span class=\"token operator\">></span>next<span class=\"token punctuation\">)</span> <span class=\"token function\">tail</span> <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">;</span> // 重置尾指针</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    curr-<span class=\"token operator\">></span>next <span class=\"token operator\">=</span> curr-<span class=\"token operator\">></span>next-<span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span>   // 从列表中删除 </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    delete ltemp<span class=\"token punctuation\">;</span>                    //回收空间</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    cnt--<span class=\"token punctuation\">;</span>\t\t\t     // 当前列表大小减一</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  void moveToStart<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> // 将curr设置在列表头部</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> curr <span class=\"token operator\">=</span> <span class=\"token function\">head</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  void moveToEnd<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   // 将curr设置在列表尾部</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> curr <span class=\"token operator\">=</span> <span class=\"token function\">tail</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  // 将curr指针往前（左）移一步；如果已经指向头部了就不需要改变 </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  void <span class=\"token function-name function\">prev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr <span class=\"token operator\">==</span> <span class=\"token function\">head</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span><span class=\"token punctuation\">;</span>       // 之前没有元素 </pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    Link<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span>* temp <span class=\"token operator\">=</span> <span class=\"token function\">head</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    // March down list <span class=\"token keyword\">until</span> we <span class=\"token function\">find</span> the previous element</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp-<span class=\"token operator\">></span>next<span class=\"token operator\">!=</span>curr<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">temp</span><span class=\"token operator\">=</span>temp-<span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    curr <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  // 将curr指针往后（右）移一步；如果已经指向尾部了就不需要改变 </pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  void <span class=\"token function-name function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr <span class=\"token operator\">!=</span> <span class=\"token function\">tail</span><span class=\"token punctuation\">)</span> curr <span class=\"token operator\">=</span> curr-<span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  int length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> const  <span class=\"token punctuation\">&#123;</span> <span class=\"token builtin class-name\">return</span> cnt<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> // 返回当前列表大小</pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  // 返回当前元素的位置</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  int currPos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> const <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    Link<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span>* temp <span class=\"token operator\">=</span> <span class=\"token function\">head</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    int i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> curr <span class=\"token operator\">!=</span> temp<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>      temp <span class=\"token operator\">=</span> temp-<span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  // 向下移动到列表“pos”位置</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  void moveToPos<span class=\"token punctuation\">(</span>int pos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    assert <span class=\"token variable\"><span class=\"token punctuation\">((</span>pos<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">&lt;=</span>cnt<span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span>//<span class=\"token string\">\"Position out of range\"</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    curr <span class=\"token operator\">=</span> <span class=\"token function\">head</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    for<span class=\"token punctuation\">(</span>int <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>pos<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> curr <span class=\"token operator\">=</span> curr-<span class=\"token operator\">></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  const E<span class=\"token operator\">&amp;</span> getValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> const <span class=\"token punctuation\">&#123;</span> // 返回当前元素</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    assert<span class=\"token punctuation\">(</span>curr-<span class=\"token operator\">></span>next <span class=\"token operator\">!=</span> NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//<span class=\"token string\">\"No value\"</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> curr-<span class=\"token operator\">></span>next-<span class=\"token operator\">></span>element<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-5\"><a class=\"markdownIt-Anchor\" href=\"#分析-5\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>用于邻接表，对于模板E，在邻接表里返回的是Edge类的实例</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"邻接表\"><a class=\"markdownIt-Anchor\" href=\"#邻接表\">#</a> 邻接表</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// From the software distribution accompanying the textbook</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// <span class=\"token string\">\"A Practical Introduction to Data Structures and Algorithm Analysis,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// Third Edition (C++)\"</span> by Clifford A. Shaffer.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>// Source code Copyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token number\">2007</span>-2011 by Clifford A. Shaffer.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>// Include this <span class=\"token function\">file</span> to access Graph representation implemented using an</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>// Adjacency List</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># ifndef GRLIST</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># define GRLIST</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#include &lt;stdio.h></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#include &lt;ctype.h></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#include &lt;assert.h></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>// Used by the mark array</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#define UNVISITED 0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#define VISITED 1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#include \"link.h\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#include \"llist.h\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#include \"graph.h\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>// Edge class <span class=\"token keyword\">for</span> Adjacency List graph representation</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>class Edge //包含两个属性，边的两点</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    int vert, wt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>public:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function-name function\">Edge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        vert <span class=\"token operator\">=</span> -1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        wt <span class=\"token operator\">=</span> -1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    Edge<span class=\"token punctuation\">(</span>int v, int w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        vert <span class=\"token operator\">=</span> <span class=\"token function\">v</span><span class=\"token punctuation\">;</span>//被连接的顶点都放v而非w，便于后续返回此值</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        wt <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>//邻接表的头</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    int <span class=\"token function-name function\">vertex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> vert<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    int <span class=\"token function-name function\">weight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> wt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>class Graphl <span class=\"token builtin class-name\">:</span> public Graph</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>private:</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    List<span class=\"token operator\">&lt;</span>Edge<span class=\"token operator\">></span>** vertex<span class=\"token punctuation\">;</span>        // List headers</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    int numVertex, numEdge<span class=\"token punctuation\">;</span>     // Number of vertices, edges</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    int *mark<span class=\"token punctuation\">;</span>                  // Pointer to mark array</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>public:</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Graphl<span class=\"token punctuation\">(</span>int numVert<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        Init<span class=\"token punctuation\">(</span>numVert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    ~Graphl<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>         // Destructor</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mark<span class=\"token punctuation\">;</span> // Return dynamically allocated memory</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        delete <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vertex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    void Init<span class=\"token punctuation\">(</span>int n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        int i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        numVertex <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        numEdge <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        mark <span class=\"token operator\">=</span> new int<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  // Initialize mark array</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> mark<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> UNVISITED<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        // Create and initialize adjacency lists</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        vertex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>List<span class=\"token operator\">&lt;</span>Edge<span class=\"token operator\">></span>**<span class=\"token punctuation\">)</span> new List<span class=\"token operator\">&lt;</span>Edge<span class=\"token operator\">></span>*<span class=\"token punctuation\">[</span>numVertex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new LList<span class=\"token operator\">&lt;</span>Edge<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    int <span class=\"token function-name function\">n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> numVertex<span class=\"token punctuation\">;</span>    // Number of vertices</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    int <span class=\"token function-name function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> numEdge<span class=\"token punctuation\">;</span>    // Number of edges</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    int first<span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span>   // Return first neighbor of <span class=\"token string\">\"v\"</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vertex<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token builtin class-name\">return</span> numVertex<span class=\"token punctuation\">;</span>      // No neighbor</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        vertex<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>moveToStart<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        Edge it <span class=\"token operator\">=</span> vertex<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>getValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> it.vertex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    // Get v's next neighbor after w</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    int next<span class=\"token punctuation\">(</span>int v, int w<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        Edge it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isEdge<span class=\"token punctuation\">(</span>v, w<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>vertex[v]<span class=\"token operator\">-</span><span class=\"token operator\">></span>currPos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> vertex[v]<span class=\"token operator\">-</span><span class=\"token operator\">></span>length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                vertex<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                it <span class=\"token operator\">=</span> vertex<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>getValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                <span class=\"token builtin class-name\">return</span> it.vertex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // No neighbor</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    // Set edge <span class=\"token punctuation\">(</span>i, j<span class=\"token punctuation\">)</span> to <span class=\"token string\">\"weight\"</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    void setEdge<span class=\"token punctuation\">(</span>int i, int j, int weight<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>//   Assert<span class=\"token punctuation\">(</span>weight<span class=\"token operator\">></span><span class=\"token number\">0</span>, <span class=\"token string\">\"May not set weight to 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        assert<span class=\"token punctuation\">(</span>weight <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        Edge currEdge<span class=\"token punctuation\">(</span>j, weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isEdge<span class=\"token punctuation\">(</span>i, j<span class=\"token punctuation\">))</span>   // Edge already exists <span class=\"token keyword\">in</span> graph</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>remove<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>insert<span class=\"token punctuation\">(</span>currEdge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">else</span>   // Keep neighbors sorted by vertex index</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            numEdge++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>moveToStart<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                    vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>currPos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                    vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                Edge temp <span class=\"token operator\">=</span> vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>getValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp.vertex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>insert<span class=\"token punctuation\">(</span>currEdge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    void delEdge<span class=\"token punctuation\">(</span>int i, int j<span class=\"token punctuation\">)</span>    // Delete edge <span class=\"token punctuation\">(</span>i, j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isEdge<span class=\"token punctuation\">(</span>i, j<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>remove<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            numEdge--<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    bool isEdge<span class=\"token punctuation\">(</span>int i, int j<span class=\"token punctuation\">)</span>   // Is <span class=\"token punctuation\">(</span>i,j<span class=\"token punctuation\">)</span> an edge?</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        Edge it<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>moveToStart<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>currPos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>length<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span>              // Check whole list</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            Edge temp <span class=\"token operator\">=</span> vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>getValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp.vertex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> j<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    int weight<span class=\"token punctuation\">(</span>int i, int j<span class=\"token punctuation\">)</span>   // Return weight of <span class=\"token punctuation\">(</span>i, j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        Edge curr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isEdge<span class=\"token punctuation\">(</span>i, j<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            curr <span class=\"token operator\">=</span> vertex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>-<span class=\"token operator\">></span>getValue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token builtin class-name\">return</span> curr.weight<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    int getMark<span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> mark<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    void setMark<span class=\"token punctuation\">(</span>int v, int val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        mark<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    int getInDegree<span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span>   // 求顶点v的入度</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        int result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        //<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>. 在此行以下插入补充代码</pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"190\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isEdge<span class=\"token punctuation\">(</span>i, <span class=\"token function\">v</span><span class=\"token punctuation\">))</span> result++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        //<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>. 在此行以上插入补充代码</pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    int getOutDegree<span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span>    // 求顶点v的出度</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        int <span class=\"token assign-left variable\">result</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>         //<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>. 在此行以下插入补充代码</pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numVertex<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"204\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isEdge<span class=\"token punctuation\">(</span>v, i<span class=\"token punctuation\">))</span> result++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>        //<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>. 在此行以上插入补充代码</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre></pre></td></tr><tr><td data-num=\"213\"></td><td><pre><span class=\"token comment\"># endif // GRLIST</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-6\"><a class=\"markdownIt-Anchor\" href=\"#分析-6\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>int数组mark用于标记是否已被访问，在这里其实bool也够了</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"一些操作的头文件\"><a class=\"markdownIt-Anchor\" href=\"#一些操作的头文件\">#</a> 一些操作的头文件</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#ifndef GRAPH_TEST_H_INCLUDED</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#define GRAPH_TEST_H_INCLUDED</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#define INFINITY 1000000</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#include &lt;queue></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>class option</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>private:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Graph *G<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>public:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>// Start with some implementations <span class=\"token keyword\">for</span> the abstract functions</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    option<span class=\"token punctuation\">(</span>Graph *g<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        G <span class=\"token operator\">=</span> g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    void DFS<span class=\"token punctuation\">(</span>int v, void <span class=\"token punctuation\">(</span>*PreVisit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span>, void <span class=\"token punctuation\">(</span>*PostVisit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span>, void <span class=\"token punctuation\">(</span>*Visiting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">))</span>   // Depth first search</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        PreVisit<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        Visiting<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        G-<span class=\"token operator\">></span>setMark<span class=\"token punctuation\">(</span>v, VISITED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int w <span class=\"token operator\">=</span> G-<span class=\"token operator\">></span>first<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">&lt;</span> G-<span class=\"token operator\">></span>n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">=</span> G-<span class=\"token operator\">></span>next<span class=\"token punctuation\">(</span>v, w<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>G-<span class=\"token operator\">></span>getMark<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> UNVISITED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                DFS<span class=\"token punctuation\">(</span>w, *PreVisit, *PostVisit, *Visiting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        PostVisit<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    void BFS<span class=\"token punctuation\">(</span>int start, void <span class=\"token punctuation\">(</span>*PreVisit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span>, void <span class=\"token punctuation\">(</span>*PostVisit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">)</span>, void <span class=\"token punctuation\">(</span>*Visiting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>int <span class=\"token function\">v</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        int v, w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        queue<span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        q.push<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        PreVisit<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        G-<span class=\"token operator\">></span>setMark<span class=\"token punctuation\">(</span>start, VISITED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>q.size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token function\">v</span> <span class=\"token operator\">=</span> q.front<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            q.pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            Visiting<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">=</span> G-<span class=\"token operator\">></span>first<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">&lt;</span> G-<span class=\"token operator\">></span>n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">=</span> G-<span class=\"token operator\">></span>next<span class=\"token punctuation\">(</span>v, w<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>G-<span class=\"token operator\">></span>getMark<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> UNVISITED<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    G-<span class=\"token operator\">></span>setMark<span class=\"token punctuation\">(</span>w, VISITED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    PreVisit<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    q.push<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            PostVisit<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    void Dijkstra1<span class=\"token punctuation\">(</span>int* D, int s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        int i, v, w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G-<span class=\"token operator\">></span>n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token function\">v</span> <span class=\"token operator\">=</span> minVertex<span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> INFINITY<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            G-<span class=\"token operator\">></span>setMark<span class=\"token punctuation\">(</span>v, VISITED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">=</span> G-<span class=\"token operator\">></span>first<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">&lt;</span> G-<span class=\"token operator\">></span>n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">=</span> G-<span class=\"token operator\">></span>next<span class=\"token punctuation\">(</span>v, w<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> + G-<span class=\"token operator\">></span>weight<span class=\"token punctuation\">(</span>v, w<span class=\"token punctuation\">))</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    D<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> D<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> + G-<span class=\"token operator\">></span>weight<span class=\"token punctuation\">(</span>v, w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    int minVertex<span class=\"token punctuation\">(</span>int* D<span class=\"token punctuation\">)</span>   // Find min cost vertex</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        int i, <span class=\"token function\">v</span> <span class=\"token operator\">=</span> -1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        // Initialize <span class=\"token function\">v</span> to some unvisited vertex</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G-<span class=\"token operator\">></span>n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>G-<span class=\"token operator\">></span>getMark<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> UNVISITED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token function\">v</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token builtin class-name\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i++<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G-<span class=\"token operator\">></span>n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span> // Now <span class=\"token function\">find</span> smallest D value</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>G<span class=\"token operator\">-</span><span class=\"token operator\">></span>getMark<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> UNVISITED<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>D[i] <span class=\"token operator\">&lt;</span> D[v]<span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token function\">v</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token builtin class-name\">return</span> <span class=\"token function\">v</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    void AddEdgetoMST<span class=\"token punctuation\">(</span>int v1, int v2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Add edge \"</span> <span class=\"token operator\">&lt;&lt;</span> v1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" to \"</span> <span class=\"token operator\">&lt;&lt;</span> v2 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    void Prim<span class=\"token punctuation\">(</span>int* D, int s<span class=\"token punctuation\">)</span>   // Prim's MST algorithm</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        int V<span class=\"token punctuation\">[</span>G-<span class=\"token operator\">></span>n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                     // Store closest vertex 存储最近节点</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        int i, w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> G-<span class=\"token operator\">></span>n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>         // Process the vertices 处理节点</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            int <span class=\"token function\">v</span> <span class=\"token operator\">=</span> minVertex<span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            G-<span class=\"token operator\">></span>setMark<span class=\"token punctuation\">(</span>v, VISITED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                AddEdgetoMST<span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span>, <span class=\"token function\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         // Add edge to MST 向MST中添加边</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> INFINITY<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">return</span><span class=\"token punctuation\">;</span>    // Unreachable vertices 不可达节点</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">=</span> G-<span class=\"token operator\">></span>first<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">&lt;</span> G-<span class=\"token operator\">></span>n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> w <span class=\"token operator\">=</span> G-<span class=\"token operator\">></span>next<span class=\"token punctuation\">(</span>v, w<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>D<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> G-<span class=\"token operator\">></span>weight<span class=\"token punctuation\">(</span>v, w<span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                    D<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> G-<span class=\"token operator\">></span>weight<span class=\"token punctuation\">(</span>v, w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       // Update distance 更新距离</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                    V<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">v</span><span class=\"token punctuation\">;</span>                    // Where it came from记录节点</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token comment\">#endif // GRAPH_TEST_H_INCLUDED</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"分析-7\"><a class=\"markdownIt-Anchor\" href=\"#分析-7\">#</a> 分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>最短路径后续会写专题，P算法就是之前最小生成树里那个</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>DFS、BFS同样符合之前文章中的模板</pre></td></tr></table></figure><p>More info: <a href=\"https://fzglch.github.io/2021/03/03/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/\">最小生成树</a><br>\n<a href=\"https://fzglch.github.io/2021/04/05/DFS%E5%92%8CBFS/\"> DFS\\BFS</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/04/18/%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF%E4%B8%8E%E5%93%88%E5%AF%86%E5%B0%94%E9%A1%BF%E5%9B%9E%E8%B7%AF/",
            "url": "https://fzglch.github.io/2021/04/18/%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF%E4%B8%8E%E5%93%88%E5%AF%86%E5%B0%94%E9%A1%BF%E5%9B%9E%E8%B7%AF/",
            "title": "欧拉回路与哈密尔顿回路与欧拉回路",
            "date_published": "2021-04-18T10:35:36.000Z",
            "content_html": "<p>这篇文章主要是讲的哈密尔顿回路与欧拉回路的问题，属于图论</p>\n<h2 id=\"欧拉回路\"><a class=\"markdownIt-Anchor\" href=\"#欧拉回路\">#</a> 欧拉回路</h2>\n<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>一个图如果从某个点一笔画完，并且每个边只经过一次，最终回到起点，那么这条路径便是这个图的欧拉回路</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>根据图自身的情况，欧拉回路可能不唯一，也可能不存在</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"欧拉回路的算法思想\"><a class=\"markdownIt-Anchor\" href=\"#欧拉回路的算法思想\">#</a> 欧拉回路的算法思想</h2>\n<h3 id=\"对于无向图\"><a class=\"markdownIt-Anchor\" href=\"#对于无向图\">#</a> 对于无向图</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h  </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>其存在的充要条件为：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>G为连通图，并且G仅有两个奇度结点（度数为奇数的顶点）或者无奇度结点。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>并且可以得到：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> 当G是仅有两个奇度结点的连通图时，G的欧拉通路必以此两个结点为端点。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> 当G是无奇度结点的连通图时，G必有欧拉回路。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> G为欧拉图（存在欧拉回路）的充分必要条件是G为无奇度结点的连通图。</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"对于有向图\"><a class=\"markdownIt-Anchor\" href=\"#对于有向图\">#</a> 对于有向图</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>其存在的充要条件为：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>D为有向图，D的基图连通，并且所有顶点的出度与入度都相等；或者除两个顶点外，其余顶点的出度与入度都相等，而这两个顶点中一个顶点的出度与入度之差为1，另一个顶点的出度与入度之差为-1。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>并且可以得到：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> 当D除出、入度之差为1，-1的两个顶点之外，其余顶点的出度与入度都相等时，D的有向欧拉通路必以出、入度之差为1的顶点作为始点，以出、入度之差为-1的顶点作为终点。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> 当D的所有顶点的出、入度都相等时，D中存在有向欧拉回路。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> 有向图D为有向欧拉图的充分必要条件是D的基图为连通图，并且所有顶点的出、入度都相等。</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"哈密尔顿回路\"><a class=\"markdownIt-Anchor\" href=\"#哈密尔顿回路\">#</a> 哈密尔顿回路</h2>\n<h3 id=\"简介-2\"><a class=\"markdownIt-Anchor\" href=\"#简介-2\">#</a> 简介</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>如果从一个点出发，经过每个点各一次且回到出发点，那么这个路径就称为这个图的哈密尔顿回路</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>同样，根据图自身的情况，哈密尔顿回路可能不唯一，也可能不存在</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"算法思想\"><a class=\"markdownIt-Anchor\" href=\"#算法思想\">#</a> 算法思想</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>哈密尔顿回路与欧拉回路不同，没有很好的充要条件来帮助解决问题</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>故采用一般图的遍历方式，DFS或BFS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>而BFS更适合找最短路径，DFS则能更好的一条路遍历到底</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>故哈密尔顿问题不适合BFS，适合用DFS</pre></td></tr></table></figure><p>More info: <a href=\"https://fzglch.github.io/2021/04/05/DFS%E5%92%8CBFS/\">另一篇关于 DFS 和 BFS 的文章</a></p>\n<h3 id=\"求解过程\"><a class=\"markdownIt-Anchor\" href=\"#求解过程\">#</a> 求解过程</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>用DFS遍历图，当所有的点被访问判断此点是否有直接回到起点的边，有则是哈密尔顿回路</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>此问题是一个简单的图形，输入的是起点，最后输出的是从起点出发存在的哈密尔顿的总个数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>中间输出的，是DFS的过程</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>边的关系和点的个数可以修改</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#include&lt;cstdio></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#include&lt;cstring></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>const int pointNum <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>bool isVisited<span class=\"token punctuation\">[</span>pointNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>bool edges<span class=\"token punctuation\">[</span>pointNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pointNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>int result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>int visitedNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>int input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>void <span class=\"token function-name function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tmemset<span class=\"token punctuation\">(</span>edges, sizeof<span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">)</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tmemset<span class=\"token punctuation\">(</span>isVisited, sizeof<span class=\"token punctuation\">(</span>isVisited<span class=\"token punctuation\">)</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tresult <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tvisitedNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>void setEdge<span class=\"token punctuation\">(</span>int a, int b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tedges<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> edges<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>void <span class=\"token function-name function\">setEdges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\tsetEdge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tsetEdge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tsetEdge<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tsetEdge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tsetEdge<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tsetEdge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tsetEdge<span class=\"token punctuation\">(</span><span class=\"token number\">2</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tsetEdge<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\tsetEdge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>, <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tsetEdge<span class=\"token punctuation\">(</span><span class=\"token number\">4</span>, <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\tsetEdge<span class=\"token punctuation\">(</span><span class=\"token number\">5</span>, <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\tsetEdge<span class=\"token punctuation\">(</span><span class=\"token number\">6</span>, <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>void dfs<span class=\"token punctuation\">(</span>int start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visitedNum <span class=\"token operator\">==</span> pointNum<span class=\"token punctuation\">)</span>//先检验是否到边界</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t//相关操作；</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\tresult++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t//return<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token builtin class-name\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pointNum<span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span>//尝试每一种可能</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t//添加标志；</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t//dfs（start + <span class=\"token number\">1</span>）<span class=\"token punctuation\">;</span>//递归</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t//删除标志；</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\tisVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d,\"</span>, i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\tvisitedNum++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\tdfs<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\tisVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"从%d离开,\"</span>, i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\tvisitedNum--<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\tinit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\tsetEdges<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\tscanf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span>, <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input <span class=\"token operator\">></span><span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> input <span class=\"token operator\">&lt;</span> pointNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tisVisited<span class=\"token punctuation\">[</span>input<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\tvisitedNum++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tdfs<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\tprintf<span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token entity\" title=\"\\n\">\\n</span>结果是%d<span class=\"token entity\" title=\"\\n\">\\n</span>\"</span>, result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token keyword\">else</span>  printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"超出范围\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"性能分析\"><a class=\"markdownIt-Anchor\" href=\"#性能分析\">#</a> 性能分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>由于DFS是暴力的把所有情况一个不漏的全部跑一遍来找出所有可能的情况，所以复杂度上体现出来的自然是暴力的</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>具体对于一条边，其下可能的所有走法都得乘起来，而这些边其下的走法也都得乘起来</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>根据边的个数和图连接的复杂程度不尽相同</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/04/05/DFS%E5%92%8CBFS/",
            "url": "https://fzglch.github.io/2021/04/05/DFS%E5%92%8CBFS/",
            "title": "DFS和BFS",
            "date_published": "2021-04-05T10:50:46.000Z",
            "content_html": "<p>这篇文章主要是讲的简单搜索</p>\n<h2 id=\"dfs\"><a class=\"markdownIt-Anchor\" href=\"#dfs\">#</a> DFS</h2>\n<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Depth-First-Search，深度优先搜索</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>比如走迷宫，如果一条路走到死才会回头就是一种DFS</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>另外如果一直贴着入口的左边墙走，那么一定会到达出口的左墙，右边类似</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>而这种贴墙的走法其实就是一种DFS，走到头然后回溯到上一个结点</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC9iYWlrZS0lRTYlQjclQjElRTUlQkElQTYlRTQlQkMlOTglRTUlODUlODglRTYlOTAlOUMlRTclQjQlQTI=\">DFS–中文维基百科</span></p>\n<h3 id=\"实现思路\"><a class=\"markdownIt-Anchor\" href=\"#实现思路\">#</a> 实现思路</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dfs总和递归形影不离</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>其关键也就在于如何把握递归开始的位置，“此路已走”的标志，而这也是其难的地方</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"大致格式\"><a class=\"markdownIt-Anchor\" href=\"#大致格式\">#</a> 大致格式</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>void dfs （int start）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    if（start<span class=\"token operator\">==</span>n）//先检验是否到边界</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        相关操作；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        return；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    for（）//尝试每一种可能</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        添加标志；</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        dfs（start+1）<span class=\"token punctuation\">;</span>//递归</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        删除标志；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"示例1\"><a class=\"markdownIt-Anchor\" href=\"#示例1\">#</a> 示例 1</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>问题：a<span class=\"token punctuation\">[</span>n-1<span class=\"token punctuation\">]</span>和b<span class=\"token punctuation\">[</span>n-1<span class=\"token punctuation\">]</span>，是两个有n个int数的数组，对每个下标，选择其中一个数组对应下标的的数出来</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        （比如对于1，可以选a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>或者b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>），来使得n个数之和为k，问有多少种选法。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>void dfs（int start）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    if（start<span class=\"token operator\">==</span>n）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        if（sum<span class=\"token operator\">==</span>k） kind++；//kind存的是可行选法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        return；</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">sum</span> <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span>；</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    dfs（start+1）；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">sum</span> -<span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">sum</span> <span class=\"token operator\">+=</span> b<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span>；</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    dfs（start+1）；</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">sum</span> -<span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>//这6句实际上就是遍历每种可能性，相当于伪码格式种for循环部分</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>当然，我们可以分析到其复杂度是和暴力法相当的</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>因为实际上BFS和DFS都是暴力的，或者找到便停止算法（比如找到迷宫出口）</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>而此问题不是找到一种即可，而是问有多少种选法，所以实际上是一种暴力算法</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>并且还是递归的暴力，是一种很不好的解决方案</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>但把这个问题用DFS的思路做出来，就已经达到思考的效果了</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>很容易想到的一个优化就是当 sum已经大于k还没走完n，可以剪纸了</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>其实这个问题更适合用二分来做，但不在这篇文章中说明，可能以后会更新二分的文章</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"示例2\"><a class=\"markdownIt-Anchor\" href=\"#示例2\">#</a> 示例 2</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>问题：输入n行，每行n个元素，元素要么是<span class=\"token comment\">#要么是。来表示一个 nXn 大小的棋盘</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        其中<span class=\"token comment\">#表示可以落子，. 不能落子，要放入 num 个子，要求每个子都不同行不同列</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        问有多少种放法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>void dfs（int start，int num）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    //不需要判断边界部分</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    for（int j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n <span class=\"token punctuation\">;</span> j++）//遍历每一种可能</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        if<span class=\"token punctuation\">(</span>chess<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'#'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> // 前者是可落子，后者是此列还未选</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            if<span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> kind++<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> //此列已选</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                for<span class=\"token punctuation\">(</span>int l <span class=\"token operator\">=</span> start+1 <span class=\"token punctuation\">;</span> l<span class=\"token operator\">&lt;</span>n-num+2 <span class=\"token punctuation\">;</span> l++<span class=\"token punctuation\">)</span> dfs<span class=\"token punctuation\">(</span>l,num-1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>//走下一行</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> //要回溯到上一步，取消本步选择带来的此列已选标志</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>DFS挺难理解的有时候，而且还没有什么通用的可以ctrl+v的函数</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>毕竟就如前面简介所说，dfs的递归和标志是关键点也是难点</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>不过既然如此，往好处想，每解决一个dfs问题，都是一次不可复制的经验积累</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"bfs\"><a class=\"markdownIt-Anchor\" href=\"#bfs\">#</a> BFS</h2>\n<h3 id=\"简介-2\"><a class=\"markdownIt-Anchor\" href=\"#简介-2\">#</a> 简介</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h  </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Breadth-First Search，广度优先搜索</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>比如走迷宫，如果走到下一个结点，则返回上一个结点试试其他路线，则是BFS的思路</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>再比如，若一个棋盘上只有两颗子，知道一个字，以它为中心搜索另一个子，先看周围八个格子组成的正方形有没有，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        再看更大一圈的正方形，这样先照顾到广度的搜索，就是BFS</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFNSVCOSVCRiVFNSVCQSVBNiVFNCVCQyU5OCVFNSU4NSU4OCVFNiU5MCU5QyVFNyVCNCVBMg==\">BFS–中文维基百科</span></p>\n<h3 id=\"实现思路-2\"><a class=\"markdownIt-Anchor\" href=\"#实现思路-2\">#</a> 实现思路</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bfs总和队列不离</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>把要走的一圈放入队列挨个走一遍</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"大致格式-2\"><a class=\"markdownIt-Anchor\" href=\"#大致格式-2\">#</a> 大致格式</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>void bfs（）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    int 标志 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    建队</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    此点标为已走</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    此点入队</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    while（队非空）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        得到队首数值然后出列</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        if（到达）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            相应操作</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            改变达到与否的标志</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            break；</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        for（对下一圈的所有可行元素）</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            得到值</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            if（合法且可走）</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                入队并标为已走</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    if（无达到标志）</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        相应操作</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        return；</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"示例1-2\"><a class=\"markdownIt-Anchor\" href=\"#示例1-2\">#</a> 示例 1</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>bfs就懒得找示例了，bfs相对于dfs来是简单的，是易copy的，是穿个马甲就又来找你玩的</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/04/05/%E9%AB%98%E6%95%88%E7%AD%9B%E8%B4%A8%E6%95%B0/",
            "url": "https://fzglch.github.io/2021/04/05/%E9%AB%98%E6%95%88%E7%AD%9B%E8%B4%A8%E6%95%B0/",
            "title": "高效筛质数",
            "date_published": "2021-04-05T10:26:54.000Z",
            "content_html": "<p>这篇文章主要是讲的复杂度 o（n）的筛质数，是个很简单的问题，忘了叫什么名字了，也无关紧要</p>\n<h2 id=\"质数\"><a class=\"markdownIt-Anchor\" href=\"#质数\">#</a> 质数</h2>\n<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>只能整除自身和1，最小的质数是2。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>比如若三个整数a，b，c，a*b<span class=\"token operator\">=</span>c，问a b有多少种组合，就可以通过把c拆分成各个质数的乘积来解决。</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"常规筛法\"><a class=\"markdownIt-Anchor\" href=\"#常规筛法\">#</a> 常规筛法</h2>\n<h3 id=\"常用的判断n是否为质数的方法思路\"><a class=\"markdownIt-Anchor\" href=\"#常用的判断n是否为质数的方法思路\">#</a> 常用的判断 n 是否为质数的方法思路</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h  </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>for<span class=\"token punctuation\">(</span>int i ； i*i <span class=\"token operator\">&lt;</span> n <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> if（n%i<span class=\"token operator\">==</span><span class=\"token number\">0</span>）<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.；<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>显然复杂度是log n</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC9iYWlrZS0lRTYlOTclQjYlRTklOTclQjQlRTUlQTQlOEQlRTYlOUQlODIlRTUlQkElQTY/d3Byb3Y9c3JwdzFfMA==\">时间复杂度–中文维基百科</span></p>\n<h3 id=\"用此筛法筛从1到n的复杂度\"><a class=\"markdownIt-Anchor\" href=\"#用此筛法筛从1到n的复杂度\">#</a> 用此筛法筛从 1 到 n 的复杂度</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对某个数都是log n ， n 次 ， 复杂度是 n*log n；</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"此筛法的使用思路\"><a class=\"markdownIt-Anchor\" href=\"#此筛法的使用思路\">#</a> 此筛法的使用思路</h2>\n<h3 id=\"任何质数的整k倍都不是质数k为整且大于1\"><a class=\"markdownIt-Anchor\" href=\"#任何质数的整k倍都不是质数k为整且大于1\">#</a> 任何质数的整 k 倍都不是质数（k 为整且大于 1）</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对任意质数a，k*a都不是质数可以筛掉</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"将a从2开始每次晒完范围内kaa变为下一个大于a的质数比如2后是33后是54被2那次筛掉不是质数\"><a class=\"markdownIt-Anchor\" href=\"#将a从2开始每次晒完范围内kaa变为下一个大于a的质数比如2后是33后是54被2那次筛掉不是质数\">#</a> 将 a 从 2 开始，每次晒完范围内 k*a，a 变为下一个大于 a 的质数，比如 2 后是 3，3 后是 5（4 被 2 那次筛掉不是质数）</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>比如a先是2后是3，3后是5（4被2那次筛掉不是质数），5后是7（6被3筛），7后是11（8、10被2筛，9被3筛）</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"时间复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度分析\">#</a> 时间复杂度分析</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对区间<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>，n<span class=\"token punctuation\">]</span>，每个元素要么是作为质数a被访问，要么被a*k筛去，时间复杂度是n</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/03/03/%E7%BF%BB%E5%94%B1%E6%AD%8C%E6%89%8BJonathan-Young%E7%AE%80%E4%BB%8B/",
            "url": "https://fzglch.github.io/2021/03/03/%E7%BF%BB%E5%94%B1%E6%AD%8C%E6%89%8BJonathan-Young%E7%AE%80%E4%BB%8B/",
            "title": "翻唱歌手Jonathan Young简介",
            "date_published": "2021-03-03T11:25:05.000Z",
            "content_html": "<p>外国的两个翻唱歌手，改编风格偏电吉他等比较摇滚一些的风格</p>\n<h2 id=\"大致说明\"><a class=\"markdownIt-Anchor\" href=\"#大致说明\">#</a> 大致说明</h2>\n<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>翻唱质量很高很好听，并且全部改为英文歌词  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如果你平常也看jojo，那么听推荐你点下面链接去听一听其中的这一个系列</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWpKNDExWTdRNT9wPTE=\">JOJO 系列翻唱</span></p>\n<h3 id=\"简介again\"><a class=\"markdownIt-Anchor\" href=\"#简介again\">#</a> 简介 again</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>翻唱的主要是漫曲  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>下面是找到的B站搬运的一个合集</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVc3NDExWTd1bz9mcm9tPXNlYXJjaCZhbXA7c2VpZD01MDcxMTMzNTI5NzUxNzgzMTU0\">漫曲翻唱合集</span></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/03/03/%E7%BA%BF%E6%AE%B5%E6%A0%91/",
            "url": "https://fzglch.github.io/2021/03/03/%E7%BA%BF%E6%AE%B5%E6%A0%91/",
            "title": "线段树",
            "date_published": "2021-03-03T10:54:02.000Z",
            "content_html": "<p>这篇文章主要是讲的线段数相关问题</p>\n<h2 id=\"哪类问题是线段树问题\"><a class=\"markdownIt-Anchor\" href=\"#哪类问题是线段树问题\">#</a> 哪类问题是线段树问题</h2>\n<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>当有一堆比较大的数据，且常需要用到update和query的时候</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"为什么要用线段树\"><a class=\"markdownIt-Anchor\" href=\"#为什么要用线段树\">#</a> 为什么要用线段树</h2>\n<h3 id=\"普通数组与累积和数组\"><a class=\"markdownIt-Anchor\" href=\"#普通数组与累积和数组\">#</a> 普通数组与累积和数组</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h  </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>用普通一维数组，时间复杂度上，前者是o（1），后者是o（n）  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>用累和数组，前者是o（n），后者是o（1）  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>而对于大的数据量来说，反复的复杂度为n的操作是不够快的</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC9iYWlrZS0lRTYlOTclQjYlRTklOTclQjQlRTUlQTQlOEQlRTYlOUQlODIlRTUlQkElQTY/d3Byb3Y9c3JwdzFfMA==\">时间复杂度–中文维基百科</span></p>\n<h3 id=\"此操作线段树的复杂度就是决定性的原因\"><a class=\"markdownIt-Anchor\" href=\"#此操作线段树的复杂度就是决定性的原因\">#</a> 此操作线段树的复杂度就是决定性的原因</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>线段树就是把两个操作都变成log n，而这就是这类问题要使用线段树的原因  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>其实也不一定只能是线段树才能解决这个问题，只要是把累和变成各个区间和，区间和之间再各自又有和就行  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>这样就可以做到快速得到和的同时又可以使修改一个数据的时候修改太多  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>但想来想去其实就和线段树差不多，只是线段树是两两一组而已。</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFNyVCQSVCRiVFNiVBRSVCNSVFNiVBMCU5MQ==\">线段树–中文维基百科</span></p>\n<h2 id=\"线段树的使用思路\"><a class=\"markdownIt-Anchor\" href=\"#线段树的使用思路\">#</a> 线段树的使用思路</h2>\n<h3 id=\"先贴上维基百科上的示例代码\"><a class=\"markdownIt-Anchor\" href=\"#先贴上维基百科上的示例代码\">#</a> 先贴上维基百科上的示例代码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>下面的链接里有一些大致的讲解和源码  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>看一下就好，代码不一定要写成那样，你自己的代码能好好的达到效果就OK</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC9iYWlrZS0lRTclQkElQkYlRTYlQUUlQjUlRTYlQTAlOTFfKCVFNSU4QyVCQSVFOSU5NyVCNCVFNiU5RiVBNSVFOCVBRiVBMik=\">线段树示例–中文维基百科</span></p>\n<h3 id=\"递归创建思路\"><a class=\"markdownIt-Anchor\" href=\"#递归创建思路\">#</a> 递归创建思路</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对于递归创建线段树，要创一个左到右的线段树，先创左到中，再创中到右  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>递归边界就是左右相等，此时创建最底层的一个节点。</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFOSU4MCU5MiVFNSVCRCU5Mg==\">递归–中文维基百科</span></p>\n<h3 id=\"迭代创建思路\"><a class=\"markdownIt-Anchor\" href=\"#迭代创建思路\">#</a> 迭代创建思路</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>迭代的话，最主要的是要计算这个树最左下角那个节点在对应一维数组的下标  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这样要考虑的东西会变多，而也正是因为之前递归创建没有考虑到这些  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>可能直接导致的问题就是开数组的时候只开了2n多一点点，导致wa </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>线段树具体需要多大取决于n能整除多少次2以及你具体创建树的方式  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>最坏的情况需要4n大小，比如n是65，且你创建的树特别“完整”的时候</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFOCVCRiVBRCVFNCVCQiVBMw==\">迭代–中文维基百科</span></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/03/03/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/",
            "url": "https://fzglch.github.io/2021/03/03/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/",
            "title": "最小生成树",
            "date_published": "2021-03-03T10:30:53.000Z",
            "content_html": "<p>这篇文章主要是讲的最小生成树相关问题</p>\n<h2 id=\"哪类问题是最小生成树问题\"><a class=\"markdownIt-Anchor\" href=\"#哪类问题是最小生成树问题\">#</a> 哪类问题是最小生成树问题</h2>\n<h3 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对于n个点，有m条带权重的边将它们链接着（m ∈ 【n-1，n*（n-1）/2】） </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>要求选其中n-1个边，使得权重和最小</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h2 id=\"为什么要用最小生成树\"><a class=\"markdownIt-Anchor\" href=\"#为什么要用最小生成树\">#</a> 为什么要用最小生成树</h2>\n<h3 id=\"暴力枚举法\"><a class=\"markdownIt-Anchor\" href=\"#暴力枚举法\">#</a> 暴力枚举法</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h  </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对于m条边选n-1个，选法在n和m不小的情况下非常之大  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>比如n仅仅是501，m是10000时，10000个里选500个，选法太多，枚举不现实</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC9iYWlrZS0lRTYlOTclQjYlRTklOTclQjQlRTUlQTQlOEQlRTYlOUQlODIlRTUlQkElQTY/d3Byb3Y9c3JwdzFfMA==\">时间复杂度–中文维基百科</span></p>\n<h3 id=\"同样复杂度就是决定性的原因\"><a class=\"markdownIt-Anchor\" href=\"#同样复杂度就是决定性的原因\">#</a> 同样复杂度就是决定性的原因</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>最小生成树最好情况下一次就能解决，最坏情况m-n+2次</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFNiU5QyU4MCVFNSVCMCU4RiVFNyU5NCU5RiVFNiU4OCU5MCVFNiVBMCU5MQ==\">最小生成树–中文维基百科</span></p>\n<h2 id=\"最小生成树的使用思路\"><a class=\"markdownIt-Anchor\" href=\"#最小生成树的使用思路\">#</a> 最小生成树的使用思路</h2>\n<h3 id=\"本质上都是贪心算法\"><a class=\"markdownIt-Anchor\" href=\"#本质上都是贪心算法\">#</a> 本质上都是贪心算法</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>最小生成树的两种算法思想，一个是把边排序，依次选，一个是由点出发，选小权重的边，两个本质上其实都是贪心的思想，并且是保证正确的  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>两者的关键点都在于每次选边要检验是不是会导致成环，《算法导论》里就是指安全边</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFOCVCNCVBQSVFNSVCRiU4MyVFNyVBRSU5NyVFNiVCMyU5NQ==\">贪心算法–中文维基百科</span></p>\n<h3 id=\"使用思路\"><a class=\"markdownIt-Anchor\" href=\"#使用思路\">#</a> 使用思路</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>体现在代码上，最难的部分就是并查集，使用最小生成只需要模拟一下K算法或者P算法就OK</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>值得一提的是，写起来p算法更简单，因为k算法需要并查集</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFNSVCOSVCNiVFNiU5RiVBNSVFOSU5QiU4Ng==\">并查集–中文维基百科</span></p>\n<h2 id=\"示例\"><a class=\"markdownIt-Anchor\" href=\"#示例\">#</a> 示例</h2>\n<h3 id=\"源码\"><a class=\"markdownIt-Anchor\" href=\"#源码\">#</a> 源码</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#include&lt;iostream></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#include&lt;algorithm></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>const int N <span class=\"token operator\">=</span> <span class=\"token number\">26</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>int f<span class=\"token punctuation\">[</span>N+1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>void UFInit <span class=\"token punctuation\">(</span>int n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token operator\">=</span>N <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>int Find<span class=\"token punctuation\">(</span>int a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token assign-left variable\">a</span><span class=\"token operator\">==</span>f<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> ? a <span class=\"token builtin class-name\">:</span> Find <span class=\"token punctuation\">(</span> f<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>bool Union <span class=\"token punctuation\">(</span>int a , int b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span>Find<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token assign-left variable\">b</span><span class=\"token operator\">=</span>Find<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tif<span class=\"token punctuation\">(</span>a<span class=\"token operator\">!=</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tf<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>struct Edge</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tint u,v,w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span>edges<span class=\"token punctuation\">[</span>N*<span class=\"token punctuation\">(</span>N-1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>bool cmp<span class=\"token punctuation\">(</span>Edge a , Edge b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> a.w<span class=\"token operator\">&lt;</span>b.w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>int <span class=\"token function-name function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\tint n,k,m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tint cnt2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tchar start,end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\twhile<span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>n <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tUFInit<span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token assign-left variable\">cnt2</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n-1 <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\tcin<span class=\"token operator\">>></span>start<span class=\"token operator\">>></span>k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\tfor<span class=\"token punctuation\">(</span>int j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>k <span class=\"token punctuation\">;</span> j++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\tcin<span class=\"token operator\">>></span>end<span class=\"token operator\">>></span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t\tedges<span class=\"token punctuation\">[</span>cnt2<span class=\"token punctuation\">]</span>.u<span class=\"token operator\">=</span>start - <span class=\"token string\">'A'</span> +1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t\t\tedges<span class=\"token punctuation\">[</span>cnt2<span class=\"token punctuation\">]</span>.v<span class=\"token operator\">=</span>end - <span class=\"token string\">'A'</span> +1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t\tedges<span class=\"token punctuation\">[</span>cnt2++<span class=\"token punctuation\">]</span>.w<span class=\"token operator\">=</span>m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\tint ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tsort<span class=\"token punctuation\">(</span>edges,edges+cnt2,cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tfor<span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>cnt2 <span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\tif<span class=\"token punctuation\">(</span>Union<span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.u,edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t\t<span class=\"token assign-left variable\">ans</span><span class=\"token operator\">+=</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>.w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\tcout<span class=\"token operator\">&lt;&lt;</span>ans<span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly92anVkZ2UubmV0L2NvbnRlc3QvNDIxMDUwI3Byb2JsZW0vQQ==\">对应题目链接</span></p>\n",
            "tags": []
        },
        {
            "id": "https://fzglch.github.io/2021/01/31/hello-world/",
            "url": "https://fzglch.github.io/2021/01/31/hello-world/",
            "title": "~哈喽喽~",
            "date_published": "2021-01-31T13:22:39.403Z",
            "content_html": "<p>你好，欢迎来到<a href=\"https://fzglch.github.io/\">我的静态博客</a>！祝你天天开心，心想事成</p>\n<h2 id=\"大致说明\"><a class=\"markdownIt-Anchor\" href=\"#大致说明\">#</a> 大致说明</h2>\n<h3 id=\"关于背景音乐\"><a class=\"markdownIt-Anchor\" href=\"#关于背景音乐\">#</a> 关于背景音乐</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>页面的最右边的播放按钮可播放博客音乐歌单，页面下滑后右下角也可以播放或者查看歌单列表  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>歌单动态更新哦，一般是选的比较安静让人心情好的音乐，播放源来自网易云音乐~</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"关于夜间模式\"><a class=\"markdownIt-Anchor\" href=\"#关于夜间模式\">#</a> 关于夜间模式</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>右上角可以切换夜间模式与否，减低屏幕对眼睛的伤害，尤其是在晚上没有开灯房间漫射光不足的时候</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC93aWtpLyVFNSVBNCU5QyVFOSU5NiU5MyVFNiVBOCVBMSVFNSVCQyU4Rg==\">夜间模式–中文维基百科</span></p>\n<h3 id=\"关于左下角人物\"><a class=\"markdownIt-Anchor\" href=\"#关于左下角人物\">#</a> 关于左下角人物</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>这是live2d官网发布的人物，目前并博客没有编辑让她说话，没记错的话名字是叫shizuku  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>指“雫”，中文念“xià”，现代汉语不使用此字  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>它的日语意思与康熙字典中的不同，日语中是水滴的意思，也可以理解为下落的雨滴，是比较常见的名字</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n<h3 id=\"关于左侧动态头像\"><a class=\"markdownIt-Anchor\" href=\"#关于左侧动态头像\">#</a> 关于左侧动态头像</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>源自2015龙珠剧场版神与神中其初现的特写画面</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lraS13aWtpLnRvcC9iYWlrZS0lRTQlQjglODMlRTklQkUlOEQlRTclOEYlQTBaXyVFNyVBNSU5RSVFOCU4OCU4NyVFNyVBNSU5RT93cHJvdj1zcnB3MV8w\">龙珠 Z 剧场版神与神–中文维基百科</span></p>\n<h3 id=\"关于左侧各平台连接\"><a class=\"markdownIt-Anchor\" href=\"#关于左侧各平台连接\">#</a> 关于左侧各平台连接</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>点击后会进入对应的链接，不过并没有贴入自己的其他平台账号连接，可能以后会贴上其他人的blog的友链</pre></td></tr></table></figure><p>More info: <a href=\"\">暂无</a></p>\n",
            "tags": []
        }
    ]
}